---
title: "Recipe 4: geom_cat_lm(), geom_cat_fitted(), and geom_cat_residuals()"
webr: 
  packages:
    - tidyverse
    - palmerpenguins
---


# Example recipe #4:  `geom_cat_lm()`

In this next recipe, we use panel-wise computation again to visualize an linear model that is estimated using both a continuous and a categorical variable, i.e. `lm(y ~ x + cat)`.  This may feel a bit like `geom_smooth(method = lm) + aes(group = cat)`. However, since geom_smooth does group-wise computation, the data is broken up before model estimation when a discrete variable is mapped like `aes(color = sex)` -- meaning a model is estimated for each category. Let's see how we might visual a single model that includes a categorical variable. 

Our first goal is to be able to specify a plot with newly created `geom_cat_lm()` (and well look at defining `geom_cat_fitted()` or `geom_cat_residuals()`)

```{r, eval = F}
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, 
      y = bill_length_mm,
      cat = species) +
  geom_point() + 
  geom_cat_lm()
```

```{r, code = knitr::knit_code$get("fitted_1"), echo=F, message=FALSE, warning=F}



```



Let's get started!

## Step 0: use base ggplot2 to get the job done


It's a good idea to look at how you'd get things done without Stat extension first, just using 'base' ggplot2. The computational moves you make here can serve a reference for building our extension function.

```{r fitted_1, message = F, warning=F}
#| label: fitted_1

library(tidyverse)
penguins <- remove_missing(palmerpenguins::penguins)

model <- lm(formula = bill_length_mm ~ bill_depth_mm + 
              species, 
            data = penguins) 

penguins_w_fitted <- penguins |> 
  mutate(fitted = model$fitted.values)

penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, 
      y = bill_length_mm,
      group = species) +
  geom_point() + 
  geom_line(data = penguins_w_fitted,
             aes(y = fitted),
             color = "maroon4")
```

::: {.callout-tip collapse="true"}
### Pro tip.  Use `layer_data()` to inspect ggplot\'s internal data ...

Use ggplot2::layer_data() to inspect the render-ready data internal in the plot.  Your Stat will help prep data to look something like this.

```{r}
layer_data(plot = last_plot(), 
           i = 2) # the fitted y (not the raw data y) is of interest
```

:::

## Step 1: Define compute. Test.

Now you are ready to begin building your extension function. The first step is to define the compute that should be done under-the-hood when your function is used.  We'll define this in a function called `compute_panel_cat_lm()`.  The `data` input will look similar to the plot data.  You will also need to include a `scales` argument, which ggplot2 uses internally. 

```{r}
#| label: fitted_2

compute_panel_cat_lm <- function(data, scales){

  model<-lm(formula = y ~ x + cat, data = data)
  
  data |> 
    mutate(y = model$fitted.values)
  
}
```


::: {.callout-note collapse="false"}
# You may have noticed ... 

1. **... the `scales` argument in the compute definition, which is used internally in ggplot2.**  While it won't be used in your test (up next), you do need so that the computation will work in the ggplot2 setting.

2. **... that the compute function can only be used with data with variables `x` and `y`.**  These aesthetic variables names, relevant for building the plot, are generally not found in the raw data inputs for plot.
:::


### Test compute.


```{r}
## Test compute. 
penguins |>
  select(x = bill_depth_mm, 
         y = bill_length_mm,
         cat = species) |>
  compute_panel_cat_lm()
```

::: {.callout-note collapse="false"}
# You may have noticed ...

**... that we prepare the data to have columns with names x and y before testing `compute_group_medians`.** Computation will fail if the names x and y are not present given our function definition.  Internally in a plot, columns are named based on aesthetic mapping, e.g. `aes(x = bill_depth, y = bill_length)`.
:::



## Step 2: Define new Stat. Test.

Next, we use the ggplot2::ggproto function which allows you to define a new Stat object - which will let us do computation under the hood while building our plot. 

### Define Stat.


```{r}
#| label: fitted_3
StatCatLm <- ggplot2::ggproto(`_class` = "StatCatLm",
                                  `_inherit` = ggplot2::Stat,
                                  required_aes = c("x", "y", "cat"),
                                  compute_panel = compute_panel_cat_lm)
```


::: {.callout-note collapse="false"}
# You may have noticed ...

1. **... that the naming convention for the ggproto object is CamelCase.** The new class should also be named the same, i.e. `"StatLmFitted"`.

2. **... that we inherit from the 'Stat' class.**  In fact, your ggproto object is a *subclass* and you aren't fully defining it.  You simplify the definition by inheriting class properties from ggplot2::Stat. 

3. **that the compute_panel_cat_lm function is used to define our Stat's compute_panel element.** This means that data will be transformed by our compute definition -- group-wise if groups are specified.

4. **that setting `required_aes` to 'x', 'y', and 'cat' is consistent with compute requirements** The compute assumes data to be a dataframe with columns x and y. If you data doesn't have x, y, and cat your compute will fail.  Specifying `required_aes` in your Stat can improve your user interface because standard ggplot2 error messages will issue when required aes are not specified, e.g. '`stat_cat_lm()` requires the following missing aesthetics: x.'
  
:::


### Test Stat.

You can test out your Stat using them in ggplot2 geom_*() functions.  

```{r}
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm,
      y = bill_length_mm,
      cat = species) + 
  geom_point() + 
  geom_point(stat = StatCatLm) +
  geom_line(stat = StatCatLm) + 
  labs(title = "Testing StatCatLm")

```

::: {.callout-note collapse="false"}
# You may have noticed ...

**that we don't use "cat_lm" as the stat argument, which would be more consistent with base ggplot2 documentation.**  However, if you prefer, you can refer to your newly created Stat this way when testing, i.e. `geom_point(stat = "cat_lm", size = 7)`.

:::


### Test panel-wise behavior

```{r}
last_plot() + 
  aes(color = species) + 
  facet_wrap(facet = vars(sex))
```

:::  {.callout-tip collapse="true"}
# Pro tip: Think about an early exit (don't define use facing functions) ...

You might be thinking, what we've done would already be pretty useful to me.  Can I just use my Stat as-is within geom_*() functions?  

The short answer is 'yes'!  If you just want to use the Stat yourself locally in a script, there might not be much reason to go on to Step 3, user-facing functions.  But if you have a wider audience in mind, i.e. internal to organization or open sourcing in a package, probably a more succinct expression of what functionality you deliver will be useful - i.e. write the user-facing functions.

:::


:::   {.callout-tip collapse="true"}
# Pro tip: consider using `layer()` function to test instead of `geom_*(stat = StatNew)`

Instead of using a `geom_*()` function, you might prefer to use the `layer()` function in your testing step.  Occasionally, it's necessary to go this route; for example, `geom_vline()` contain no `stat` argument, but you can use the GeomVline in `layer()`.  If you are teaching this content, using `layer()` may help you better connect this step with the next, defining the user-facing functions.  

A test of StatFitted using this method follows.  You can see it is a little more verbose, as there is no default for the position argument, and setting the size must be handled with a little more care.

```{r}
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm,
      y = bill_length_mm,
      cat = species) + 
  geom_point() + 
  layer(geom = GeomLine, 
        stat = StatCatLm, 
        position = "identity", 
        params = list(color = "blue")) + 
  labs(title = "Testing StatCatLm with layer() function")
```

:::


## Step 3: Define user-facing functions. Test.


In this next section, we define user-facing functions.  Doing so is a bit of a mouthful, but see the 'Pro tip:  *Use `stat_identity` definition as a template in this step ...*' that follows.


```{r}
#| label: fitted_4

stat_cat_lm <- function(mapping = NULL, data = NULL, geom = "line", position = "identity", 
    ..., show.legend = NA, inherit.aes = TRUE) {
    layer(data = data, mapping = mapping, stat = StatCatLm, 
        geom = geom, position = position, show.legend = show.legend, 
        inherit.aes = inherit.aes, params = list(na.rm = FALSE, 
            ...))
}
```


::: {.callout-note collapse="false"}
# You may have noticed...

1. **... that the `stat_*()` function name derives from the Stat objects's name, but is snake case.** So if I wanted a StatBigCircle-based stat_\*() function, I'd create stat_big_circle().

2. **... that `StatCatLm` is used to define the new layer function**, so the computation that defines it, which is to summarize to medians, will be in play before the layer is rendered.

3. **... that `"label"` is specified as the default for the geom argument in the function.**  This means that the `ggplot2::GeomLine` will be used in the layer unless otherwise specified by the user. 
:::


::: {.callout-tip collapse="true"}
## Pro tip. ðŸŽ‰ Use ` make_constructor` from the next ggplot2 release.

```{r, eval = F}
stat_cat_lm <- make_constructor(StatCatLm, geom = "line")
```

:::


### Define geom_*() function

Because users are more accustom to using layers that have the 'geom' prefix, you might also define geom with identical properties via aliasing. 

```{r}
geom_cat_lm <- stat_cat_lm
```


::: {.callout-warning collapse="true"}
# Be aware that verbatim aliasing as shown above is a bit of a shortcut, and a tad unconventional. 

It is more conventional write out scaffolding code, nearly identical to the stat_*() definition, but has the geom fixed and the stat flexible.

But soon we can use `make_constructor()` in the next ggplot2 release, just about as easy as aliasing and which will deliver the fixed geom and flexible stat convention in what follows:


```{r, eval = F}
geom_cat_lm <- make_constructor(GeomLine, stat = "cat_lm")
```

:::


## Test/Enjoy functions

Below we use the new function `geom_cat_lm()`, contrasting it to `geom_smooth()`, which have parallel and not parallel slopes respectively.

```{r}
#| label: fitted_5
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, 
      y = bill_length_mm,
      cat = species) +
  geom_point() + 
  geom_cat_lm(color = "maroon4") +
  geom_smooth(method = "lm", 
              linewidth = .2) 
```

### And check out conditionality


```{r}
#| label: fitted_6
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, 
      y = bill_length_mm,
      cat = species) +
  geom_point() + 
  geom_cat_lm(color = "maroon4") + 
  facet_wrap(facets = vars(sex))
```

Note that because `panel-wise` (facet-wise) computation is specified, there are in fact, two separately *are* estimated models for female and male.  If the model is to be computed across all of the data, it's worth considering layer-wise computation, i.e. specifying the `compute_layer` slot (not yet covered in these tutorials).  


# Done! Time for a review.

Here is a quick review of the functions and ggproto objects we've covered, dropping tests and discussion.

::: {.callout-note collapse="false"}
# Review

```{r, warning=F, message=F}
library(tidyverse)

# Step 1. Define compute
compute_panel_cat_lm <- function(data, scales){
  model <- lm(formula = y ~ x + cat, data = data)
  data |> 
    mutate(y = model$fitted.values)
}


# Step 2. Define Stat
StatCatLm = ggproto(`_class` = "StatCatLm",
                      `_inherit` = Stat,
                      required_aes = c("x", "y"),
                      compute_group = compute_panel_cat_lm)

# Step 3. Define user-facing functions

## define stat_*()
stat_cat_lm <- function(mapping = NULL, data = NULL, 
                         geom = "line", position = "identity", 
                         ..., show.legend = NA, inherit.aes = TRUE) 
{
    layer(data = data, mapping = mapping, stat = StatCatLm, 
        geom = geom, position = position, show.legend = show.legend, 
        inherit.aes = inherit.aes, params = rlang::list2(na.rm = FALSE, 
            ...))
}

## define geom_*()
geom_cat_lm <- stat_cat_lm
```

::: 

# Your Turn: Write `geom_cat_fitted()` and `geom_cat_residuals()`

Using the `geom_cat_lm` Recipe #3 as a reference, try to create a `geom_cat_fitted()` *and* `geom_cat_residuals()` that draws fitted values and segments between observed and fitted values for a linear model with a categorical variable. 

### Hint: consider what aesthetics are required for segments.  We'll give you Step 0 this time...

## Step 0: use base ggplot2 to get the job done

```{webr-r}
#| label: exercise-setup
#| autorun: true
#| read-only: true
library(tidyverse)
library(palmerpenguins)

penguins_clean <- remove_missing(penguins) 

# step 0: use base ggplot2
model <- lm(formula = bill_length_mm ~ bill_depth_mm + species, 
            data = penguins_clean) 

penguins_w_fitted <- penguins_clean |> 
  mutate(fitted = model$fitted.values)

penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm, group = species) +
  geom_point(data = penguins_w_fitted,
             aes(y = fitted),
             color = "maroon4") +
  geom_segment(data = penguins_w_fitted,
             aes(yend = fitted, xend = bill_depth_mm),
             color = "maroon4") + 
  geom_point()
```

### Step 1: Write compute. Test.

```{webr}
# Define. 
compute_panel_cat_fitted <- function(data, scales){
  
  model <- lm(formula = y ~ x + cat, data = ____)
  
  data |> 
    mutate(y = model$fitted.values)
  
}

#| exercise: geom_means
# Define. 
compute_panel_cat_residuals <- function(data, scales){
  
  model <- lm(formula = y ~ x + cat, data = data)
  
  ____ |> 
    mutate(xend = x,
           yend = model$fitted.values)
  
}




# Test. compute_panel_cat_residuals
penguins_clean |> 
  select(x = bill_depth_mm, 
         ____ = bill_length_mm,
         cat = species) |>
  compute_panel_cat_residuals()


# Test. compute_panel_cat_fitted
penguins_clean |> 
  select(x = bill_depth_mm, 
         y = bill_length_mm,
         ____ = species) |>
  compute_panel_cat_fitted()
```

### Step 2: Write Stat.


```{webr}
#| exercise: geom_means

#| exercise: geom_means
# Define StatCatFitted.
StatCatFitted <- ggproto(`_class` = "____",
                     `_inherit` = Stat,
                     compute_panel = compute_panel_cat_fitted,
                     required_aes = c("x", "____", "cat"))


# Define StatCatResiduals.
StatCatResiduals <- ggproto(`_class` = "StatCatResiduals",
                     `_inherit` = Stat,
                     compute_panel = ____,
                     required_aes = c("x", "y", "____"))



# Test StatCatFitted & StatCatResiduals.
penguins_clean |> 
  ggplot() + 
  aes(x = bill_depth_mm, 
      y = bill_length_mm,
      cat = species) + 
  geom_point(stat = StatCatFitted, color = "maroon4") +
  geom_segment(stat = ____, color = "maroon4") +
  geom_point()

```

### Step 3: Write user-facing functions. 


```{webr}
#| exercise: geom_means
# Define.
stat_cat_fitted <- function (mapping = NULL, data = NULL, geom = "point", position = "identity", 
    ..., show.legend = NA, inherit.aes = TRUE){
    layer(data = data, mapping = mapping, stat = ____, 
        geom = geom, position = position, show.legend = show.legend, 
        inherit.aes = inherit.aes, params = rlang::list2(na.rm = FALSE, 
            ...))
}


# Define.
stat_cat_residuals <- function (mapping = NULL, data = NULL, geom = ____, position = "identity", 
    ..., show.legend = NA, inherit.aes = TRUE){
    layer(data = data, mapping = mapping, stat = ____, 
        geom = geom, position = position, show.legend = show.legend, 
        inherit.aes = inherit.aes, params = rlang::list2(na.rm = FALSE, 
            ...))
}

# Alias.
geom_cat_fitted <- ____
geom_cat_residuals <- ____

# Test.
penguins_clean |> 
  ggplot() + 
  aes(x = bill_depth_mm, 
      y = bill_length_mm,
      cat = species) + 
  ____(color = "maroon4") + 
  geom_cat_residuals(color = "maroon4") +
  geom_point()
```


# Congratulations!

If you've finished all four recipes, you should have a good feel for writing `Stats`, and `stat_\*()` and `geom_\*()` functions.


