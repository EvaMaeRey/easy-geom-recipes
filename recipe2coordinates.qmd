---
title: "recipe 2: `geom_coords()`"
author: "Gina Reynolds, Morgan Brown"
date: "1/3/2022"
webr: 
  packages:
    - tidyverse
    - palmerpenguins
---




This tutorial is intended for individuals who already have a working knowledge of the grammar of ggplot2, but may like to build a richer vocabulary for themselves via the Stat extension mechanism.

# Preview

Our recipes take the form:

- *Step 0. Get the job done with 'base' ggplot2.* 
It's a good idea to clarify what needs to happen without getting into the extension architecture
- *Step 1. Write a computation function.* 
Wrap the necessary computation into a function that your target geom_*() function will perform. We focus on 'compute_group' computation only in this tutorial.
- *Step 2. Define a ggproto object.* 
ggproto objects allow your extension to work together with base ggplot2 functions!  You'll use the computation function from step 1 to help define it.  
- *Step 3. Write your geom function!* 
You're ready to write your function.  You will incorporate the ggproto from step 2 and also define which more primitive geom (point, text, segment etc) you want other behaviors to inherit from. 
- *Step 4. Test/Enjoy!*
Take your new geom for a spin! Check out group-wise computation behavior!

Below, you'll see a completely worked example (example recipes) and then a invitation to build a related target geom_*().


# Example recipe #2:  `geom_label_id()`

---

## Step 0: use base ggplot2 to get the job done


```{r}
#| label: cars
# step 0.a
library(tidyverse)
cars %>%
  mutate(id_number = 1:n()) %>%
  ggplot() +
  aes(x = speed, y = dist) +
  geom_point() +
  geom_label(aes(label = id_number),
    hjust = 1.2
  )

# step 0.b
layer_data(last_plot(), i = 2) %>%
  head()
```

---

## Step 1: computation


```{r}
#| label: compute_group_row_number

# you won't use the scales argument, but ggplot will later
compute_group_row_number <- function(data, scales) {
  data %>%
    # add an additional column called label
    # the geom we inherit from requires the label aesthetic
    mutate(label = 1:n())
}

# step 1b test the computation function
cars %>%
  # input must have required aesthetic inputs as columns
  rename(x = speed, y = dist) %>%
  compute_group_row_number() %>%
  head()
```

---

## Step 2: define ggproto



```{r}
#| label: StatRownumber

StatRownumber <- ggplot2::ggproto(
  `_class` = "StatRownumber",
  `_inherit` = ggplot2::Stat,
  required_aes = c("x", "y"),
  compute_group = compute_group_row_number
)

# test
cars %>%
  mutate(id_number = 1:n()) %>%
  ggplot() +
  aes(x = speed, y = dist) +
  geom_point() +
  geom_label(
    stat = StatRownumber,
    hjust = 1.2
  )
```


---

## Step 3: define geom_* function


```{r}
#| label: geom_label_row_number

geom_label_row_number <- function(mapping = NULL, data = NULL,
                                  position = "identity", na.rm = FALSE,
                                  show.legend = NA,
                                  inherit.aes = TRUE, ...) {
  ggplot2::layer(
    stat = StatRownumber, # proto object from Step 2
    geom = ggplot2::GeomLabel, # inherit other behavior, this time Label
    data = data,
    mapping = mapping,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(na.rm = na.rm, ...)
  )
}
```





---

## Step 4: Enjoy! Use your function

```{r}
#| label: enjoy_again

cars %>%
  ggplot() +
  aes(x = speed, y = dist) +
  geom_point() +
  geom_label_row_number(hjust = 1.2) # function in action
```

### And check out conditionality!

```{r}
#| label: conditional_compute

last_plot() +
  aes(color = dist > 60) # Computation is within group
```




---

# Task #2: create `geom_text_coordinates()`

Using recipe #2 as a reference, can you create the function `geom_text_coordinates()`.  

--

- geom should label point with its coordinates '(x, y)'
- geom should have behavior of geom_text (not geom_label)


Hint:

```{r}
paste0("(", 1, ", ", 3., ")")
```




```{webr-r}
# step 0: use base ggplot2

# step 1: write your compute_group function (and test)

# step 2: write ggproto with compute_group as an input

# step 3: write your geom_*() function with ggproto as an input

# step 4: enjoy!
```


