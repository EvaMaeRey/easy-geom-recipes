[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Easy geom recipes",
    "section": "",
    "text": "Easy geom recipes is a new, researched and tested point of entry for learning Stat extension. The materials are aimed at academics, data analysts, BI professionals, seasoned and new ggplot2 users, statistics educators and their students, journalists, etc.\nThe ggplot2 extension system allows us to build new ‘vocabulary’ for more fluent expression. A particularly powerful mechanism is writing new Stats which can be used in geom_*() or stat_*() user-facing functions.\nWith new Stats, you can specify calculation to be done within the ggplot2 plot pipeline:\n\nggplot(data = cars,\n       aes(x = speed, y = dist)) + \n  geom_you()  # YOU specify compute\n\nIn the project tutorials, you’ll see how to define Stats using ggproto() and how to write user-facing geom_*() or stat_*() functions.\n\nFAQ\nWhere to next:\nLet’s get cooking!: Work through Recipes 1-3: compute_group\nRather a taster platter?: Leaf through some recipes\nResearched and tested?: Why use the recipes\nWhy so hungry? What’s motivating all this\n‘My problem’s not that easy.’ I want even more recipe-like examples\nWhat if I get stuck. Is there a support group?\n\n\nSo much talk, and not much code/plots…\nAre Stat’s really so powerful? And can they really be so easy to make and use? A small taste before you go …\n\nlibrary(tidyverse)\n\n# Step 1. Define compute\ncompute_group_means &lt;- function(data, scales){\n  \n  data |&gt;\n    summarise(x = mean(x), y = mean(y))\n  \n}\n\n# Step 2.a Define Stat with ggproto\nStatMeans = ggproto(`_class` = \"StatMeans\",\n                    `_inherit` = Stat,\n                    required_aes = c(\"x\", \"y\"),\n                    compute_group = compute_group_means)\n\n# Step 2.b Try out Stat\nggplot(palmerpenguins::penguins) + \n  aes(bill_length_mm, bill_depth_mm) +\n  geom_point(alpha = .8) + \n  geom_point(stat = StatMeans, size = 6)\n\n\n\n\n\n\n\nlast_plot() + \n  aes(color = species)\n\n\n\n\n\n\n\nlast_plot() + \n  facet_wrap(facets = vars(island), ncol = 2)"
  }
]