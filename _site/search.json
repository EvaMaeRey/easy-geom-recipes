[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Easy geom recipes",
    "section": "",
    "text": "Extending ggplot2 is a powerful way to enhance productivity and make plot coding more enjoyable. Yet employment of some very useful areas of extension is quite limited, even among seasoned ggplot2 users.\nEasy geom recipes is a new point of entry for learning ggplot2 Stat extension. The materials are aimed at academics, data analysts, BI professionals, seasoned and new ggplot2 users, statistics educators and their students, journalists, etc. The approach has been tested and evaluated by data science and statistics educators.\nThe ggplot2 extension system allows us to build new ‘vocabulary’ for more fluent expression. A particularly powerful mechanism is writing new Stats which can be used in geom_*() or stat_*() user-facing functions.\nWith new Stats, you can specify calculation to be done within the ggplot2 plot pipeline:\n\nggplot(data = cars,\n       aes(x = speed, y = dist)) + \n  geom_yours()  # YOU specify compute\n\nIn the project tutorials, you’ll see how to define Stats using ggproto() and how to write user-facing geom_*() or stat_*() functions.\n\nWhere to next:\nLet’s get cooking!: Work through Intro Recipes 1-3: compute_group\nTaste without cooking?: Leaf through some recipes\nTested and evaluated?: Why use the recipes\n‘My problem’s not that easy.’ I want even more recipe-like examples\nWhat if I get stuck. Is there a support group?\nWhy so hungry? What’s motivating all this\n\n\nSo much talk, and not much code/plots…\nAre Stat’s really so powerful? And can they really be so easy to make and use? A small taste before you go …\n\nlibrary(tidyverse)\n\n# Step 1. Define compute\ncompute_group_means &lt;- function(data, scales){\n  \n  data |&gt;\n    summarise(x = mean(x), y = mean(y))\n  \n}\n\n# Step 2.a Define Stat with ggproto\nStatMeans = ggproto(`_class` = \"StatMeans\",\n                    `_inherit` = Stat,\n                    required_aes = c(\"x\", \"y\"),\n                    compute_group = compute_group_means)\n\n# Step 2.b Try out Stat\nggplot(palmerpenguins::penguins) + \n  aes(bill_length_mm, bill_depth_mm) +\n  geom_point(alpha = .8) + \n  geom_point(stat = StatMeans, size = 6)\n\n\n\n\n\n\n\nlast_plot() + \n  aes(color = species)\n\n\n\n\n\n\n\nlast_plot() + \n  facet_wrap(facets = vars(island), ncol = 2)"
  },
  {
    "objectID": "easy_geom_recipes.html",
    "href": "easy_geom_recipes.html",
    "title": "easy geom recipes",
    "section": "",
    "text": "Using ggplot2 has been described as writing ‘graphical poems’. But we may feel at a loss for ‘words’ when functions we’d like to have don’t exist. The ggplot2 extension system allows us to build new ‘vocabulary’ for fluent expression.\nAn exciting extension mechanism is that of inheriting from existing, more primitive geoms after performing some calculation.\nTo get your feet wet in this world and give you a taste of patterns for geom extension, we provide three basic examples of the geoms_ that inherit from existing geoms (point, text, segment, etc) along with a practice exercise. With such geoms, calculation is done under the hood by the ggplot2 system.\nWith these geom, you can write new graphical poems with exciting new graphical ‘words’!\nThis tutorial is intended for individuals who already have a working knowledge of the grammar of ggplot2, but may like to build a richer vocabulary for themselves."
  },
  {
    "objectID": "easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done",
    "href": "easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done",
    "title": "easy geom recipes",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\npenguins &lt;- remove_missing(penguins)\n\n\npenguins_medians &lt;- penguins %&gt;% \n  summarize(bill_length_mm_median = median(bill_length_mm),\n            bill_depth_mm_median = median(bill_depth_mm))\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm) + \n  aes(y = bill_length_mm) + \n  geom_point() + \n  geom_point(data = penguins_medians,\n    color = \"red\", size = 4,\n             aes(x = bill_depth_mm_median,\n                 y = bill_length_mm_median))"
  },
  {
    "objectID": "easy_geom_recipes.html#step-1-computation",
    "href": "easy_geom_recipes.html#step-1-computation",
    "title": "easy geom recipes",
    "section": "Step 1: computation",
    "text": "Step 1: computation\n\ndefine computation that ggplot2 should do for you, before plotting\n\nhere it’s computing a variable with labels for each observation\n\ntest that functionality Step 1.b\n\n\n# Step 1.a\ncompute_group_xy_medians &lt;- function(data, scales){ #  scales is used internally in ggplot2\n  data %&gt;% \n    summarize(x = median(x),\n            y = median(y))\n}\n\n# Step 1.b\npenguins %&gt;%\n  rename(x = bill_depth_mm,       # ggplot2 will work with 'aes' column names\n         y = bill_length_mm) %&gt;%  # therefore rename is required to used the compute function\n  compute_group_xy_medians()\n\n# A tibble: 1 × 2\n      x     y\n  &lt;dbl&gt; &lt;dbl&gt;\n1  17.3  44.5"
  },
  {
    "objectID": "easy_geom_recipes.html#step-2-define-ggproto",
    "href": "easy_geom_recipes.html#step-2-define-ggproto",
    "title": "easy geom recipes",
    "section": "Step 2: define ggproto",
    "text": "Step 2: define ggproto\nThings to notice\n\nwhat’s the naming convention for the proto object?\nwhich aesthetics are required as inputs?\nwhere does the function from above go?\n\n\nStatXYMedians &lt;- ggplot2::ggproto(`_class` = \"StatXYMedians\",\n                                  `_inherit` = ggplot2::Stat,\n                                  required_aes = c(\"x\", \"y\"),\n                                  compute_group = compute_group_xy_medians)"
  },
  {
    "objectID": "easy_geom_recipes.html#step-3-define-geom_-function",
    "href": "easy_geom_recipes.html#step-3-define-geom_-function",
    "title": "easy geom recipes",
    "section": "Step 3: define geom_* function",
    "text": "Step 3: define geom_* function\nThings to notice\n\nWhere does our work up to this point enter in?\nWhat more primitive geom will we inherit behavior from?\n\n\ngeom_point_xy_medians &lt;- function(mapping = NULL, data = NULL,\n                           position = \"identity\", na.rm = FALSE,\n                           show.legend = NA,\n                           inherit.aes = TRUE, ...) {\n  ggplot2::layer(\n    stat = StatXYMedians,        # proto object from step 2\n    geom = ggplot2::GeomPoint,   # inherit other behavior\n    data = data, \n    mapping = mapping,\n    position = position, \n    show.legend = show.legend, \n    inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}"
  },
  {
    "objectID": "easy_geom_recipes.html#step-4-enjoy-use-your-function",
    "href": "easy_geom_recipes.html#step-4-enjoy-use-your-function",
    "title": "easy geom recipes",
    "section": "Step 4: Enjoy! Use your function",
    "text": "Step 4: Enjoy! Use your function\n\npenguins %&gt;%\n  ggplot()+\n  aes(x = bill_depth_mm, y = bill_length_mm)+\n  geom_point()+\n  geom_point_xy_medians(color = \"red\")\n\n\n\n\n\n\n\n\n\nAnd check out conditionality!\n\npenguins %&gt;%\n  ggplot()+\n  aes(x = bill_depth_mm, \n      y = bill_length_mm, \n      color = species)+\n  geom_point()+\n  geom_point_xy_medians(size = 4)"
  },
  {
    "objectID": "easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-1",
    "href": "easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-1",
    "title": "easy geom recipes",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\ncars %&gt;% \n  mutate(id_number = 1:n()) %&gt;% \n  ggplot() + \n  aes(x = speed, y = dist) + \n  geom_point() + \n  geom_label(aes(label = id_number), \n             hjust = 1.2)"
  },
  {
    "objectID": "easy_geom_recipes.html#step-1-computation-1",
    "href": "easy_geom_recipes.html#step-1-computation-1",
    "title": "easy geom recipes",
    "section": "Step 1: computation",
    "text": "Step 1: computation\n\n# you won't use the scales argument, but ggplot will later\ncompute_group_row_number &lt;- function(data, scales){\n  \n  data %&gt;% \n    # add an additional column called label\n    # the geom we inherit from requires the label aesthetic\n    mutate(label = 1:n())\n  \n}\n\n# step 1b test the computation function \ncars %&gt;% \n  # input must have required aesthetic inputs as columns\n  rename(x = speed, y = dist) %&gt;% \n  compute_group_row_number() %&gt;% \n  head()\n\n  x  y label\n1 4  2     1\n2 4 10     2\n3 7  4     3\n4 7 22     4\n5 8 16     5\n6 9 10     6"
  },
  {
    "objectID": "easy_geom_recipes.html#step-2-define-ggproto-1",
    "href": "easy_geom_recipes.html#step-2-define-ggproto-1",
    "title": "easy geom recipes",
    "section": "Step 2: define ggproto",
    "text": "Step 2: define ggproto\n\nStatRownumber &lt;- ggplot2::ggproto(`_class` = \"StatRownumber\",\n                                  `_inherit` = ggplot2::Stat,\n                                  required_aes = c(\"x\", \"y\"),\n                                  compute_group = compute_group_row_number)"
  },
  {
    "objectID": "easy_geom_recipes.html#step-3-define-geom_-function-1",
    "href": "easy_geom_recipes.html#step-3-define-geom_-function-1",
    "title": "easy geom recipes",
    "section": "Step 3: define geom_* function",
    "text": "Step 3: define geom_* function\n\ndefine the stat and geom for your layer\n\n\ngeom_label_row_number &lt;- function(mapping = NULL, data = NULL,\n                           position = \"identity\", na.rm = FALSE,\n                           show.legend = NA,\n                           inherit.aes = TRUE, ...) {\n  ggplot2::layer(\n    stat = StatRownumber, # proto object from Step 2\n    geom = ggplot2::GeomLabel, # inherit other behavior\n    data = data, \n    mapping = mapping,\n    position = position, \n    show.legend = show.legend, \n    inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}"
  },
  {
    "objectID": "easy_geom_recipes.html#step-4-enjoy-use-your-function-1",
    "href": "easy_geom_recipes.html#step-4-enjoy-use-your-function-1",
    "title": "easy geom recipes",
    "section": "Step 4: Enjoy! Use your function",
    "text": "Step 4: Enjoy! Use your function\n\ncars %&gt;% \n  ggplot() + \n  aes(x = speed, y = dist) + \n  geom_point() + \n  geom_label_row_number(hjust = 1.2) # function in action\n\n\n\n\n\n\n\n\n\nAnd check out conditionality!\n\nlast_plot() + \n  aes(color = dist &gt; 60) # Computation is within group"
  },
  {
    "objectID": "easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-2",
    "href": "easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-2",
    "title": "easy geom recipes",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\nmodel &lt;- lm(formula = bill_length_mm ~ bill_depth_mm, \n            data = penguins) \n\npenguins_w_fitted &lt;- penguins %&gt;% \n  mutate(fitted = model$fitted.values)\n\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method = \"lm\", se = F) + \n  geom_point(data = penguins_w_fitted,\n             aes(y = fitted),\n             color = \"blue\")"
  },
  {
    "objectID": "easy_geom_recipes.html#step-1-computation-2",
    "href": "easy_geom_recipes.html#step-1-computation-2",
    "title": "easy geom recipes",
    "section": "Step 1: computation",
    "text": "Step 1: computation\n\ncompute_group_lm_fitted&lt;- function(data, scales){\n  model&lt;-lm(formula= y ~ x, data = data)\n  data %&gt;% \n    mutate(y=model$fitted.values)\n}\n\n# test out the function\npenguins %&gt;%\n  # rename to explicitly state the x and y inputs\n  rename(x = bill_depth_mm, y = bill_length_mm)%&gt;%\n  compute_group_lm_fitted()\n\n# A tibble: 333 × 8\n   species island        y     x flipper_length_mm body_mass_g sex     year\n   &lt;fct&gt;   &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;fct&gt;  &lt;int&gt;\n 1 Adelie  Torgersen  43.0  18.7               181        3750 male    2007\n 2 Adelie  Torgersen  43.8  17.4               186        3800 female  2007\n 3 Adelie  Torgersen  43.5  18                 195        3250 female  2007\n 4 Adelie  Torgersen  42.6  19.3               193        3450 female  2007\n 5 Adelie  Torgersen  41.8  20.6               190        3650 male    2007\n 6 Adelie  Torgersen  43.6  17.8               181        3625 female  2007\n 7 Adelie  Torgersen  42.4  19.6               195        4675 male    2007\n 8 Adelie  Torgersen  43.7  17.6               182        3200 female  2007\n 9 Adelie  Torgersen  41.4  21.2               191        3800 male    2007\n10 Adelie  Torgersen  41.5  21.1               198        4400 male    2007\n# ℹ 323 more rows"
  },
  {
    "objectID": "easy_geom_recipes.html#step-2-define-ggproto-2",
    "href": "easy_geom_recipes.html#step-2-define-ggproto-2",
    "title": "easy geom recipes",
    "section": "Step 2: define ggproto",
    "text": "Step 2: define ggproto\n\nStatLmFitted&lt;-ggplot2::ggproto(`_class` = \"StatLmFitted\",\n                                  `_inherit` = ggplot2::Stat,\n                                  required_aes = c(\"x\", \"y\"),\n                                  compute_group = compute_group_lm_fitted)"
  },
  {
    "objectID": "easy_geom_recipes.html#step-3-define-geom_-function-2",
    "href": "easy_geom_recipes.html#step-3-define-geom_-function-2",
    "title": "easy geom recipes",
    "section": "Step 3: define geom_* function",
    "text": "Step 3: define geom_* function\n\ngeom_point_lm_fitted &lt;- function(mapping = NULL, data = NULL,\n                           position = \"identity\", na.rm = FALSE,\n                           show.legend = NA,\n                           inherit.aes = TRUE, ...) {\n  ggplot2::layer(\n    stat = StatLmFitted, # proto object from step 2\n    geom = ggplot2::GeomPoint, # inherit other behavior\n    data = data, \n    mapping = mapping,\n    position = position, \n    show.legend = show.legend, \n    inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}"
  },
  {
    "objectID": "easy_geom_recipes.html#step-4-enjoy-use-your-function-2",
    "href": "easy_geom_recipes.html#step-4-enjoy-use-your-function-2",
    "title": "easy geom recipes",
    "section": "Step 4: Enjoy! Use your function",
    "text": "Step 4: Enjoy! Use your function\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method=\"lm\", se= F)+\n  geom_point_lm_fitted(color=\"blue\")\n\n\n\n\n\n\n\n\n\nAnd check out conditionality\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method=\"lm\", se= F) +\n  geom_point_lm_fitted() + \n  facet_wrap(facets = vars(species))"
  },
  {
    "objectID": "easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-3",
    "href": "easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-3",
    "title": "easy geom recipes",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\n# step 0: use base ggplot2\nmodel &lt;- lm(formula = bill_length_mm ~ bill_depth_mm, \n            data = penguins) \n\npenguins_w_fitted &lt;- penguins %&gt;% \n  mutate(fitted = model$fitted.values)\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method = \"lm\", se = F) + \n  geom_segment(data = penguins_w_fitted,\n             aes(yend = fitted, xend = bill_depth_mm),\n             color = \"blue\")\n\n\n\n\n\n\n\n# step 1: write your compute_group function (and test)\n\n# step 2: write ggproto with compute_group as an input\n\n# step 3: write your geom_*() function with ggproto as an input\n\n# step 4: enjoy!\n\n\nNot interested in writing your own geoms?\nCheck out some ready-to-go geoms that might be of interest in the ggxmean package… or other extension packages.\nInterested in working a bit more with geoms and making them available to more folks, but not interested in writing your own package?\nJoin in on the development and validation of the ggxmean package for statistical educators and everyday analysis!"
  },
  {
    "objectID": "about.html#evaluation",
    "href": "about.html#evaluation",
    "title": "about",
    "section": "Evaluation",
    "text": "Evaluation\nTo test the tutorial, we approached statistics and data analytics educators that we believed would have substantial experience with R and ggplot2 but not necessarily with ggplot2 extension. The study includes nine participants that completed the study and responded to a survey about the tutorial. Eight of the participants were also able to participate in focus group discussions following their completion of the the tutorial and survey.\n\nParticipant profiles\nRecruited participants generally had substantial experience teaching data analytics.\n\nStudy participants all had substantial experience. All had at least five years programming in the R statistical language, with the majority having more than ten years of experience.\n\n\n\nhello\n\n\nMost of the participants identified as frequent users of R, using the language almost every day.\n\n\n\nhello\n\n\nFurthermore, most of the participants (7 of 9) responded that they use ggplot2 several times a week or more.\n\n\n\nhello\n\n\nWith respect to writing functions, most of the group had experience writing functions, though the frequency was not as great as with using R and ggplot2.\n\nThe respondents use ggplot2 in a variety of contexts; notably they all use it in academic research and eight of nine used it in teaching.\n\nHowever, participants in general had little or no with writing ggplot2 extensions. Seven of the nine participants were aware of extension packages but had not attempted to write their own extension. One participant had written ggplot2 extensions prior to the tutorial.\n\nThe following figure shows attempts and successes or failures in the different ggplot2 extension areas.\n\nThe participants had a variety of experiences with object oriented programming, but the majority had no experience with object oriented programming in R. (confirm this w/ underlying data because looking at the summary figure, we can’t 100% confirm this. But I think it’s true.)",
    "crumbs": [
      "Research",
      "about"
    ]
  },
  {
    "objectID": "focus_group_script.html",
    "href": "focus_group_script.html",
    "title": "Focus Group Script",
    "section": "",
    "text": "This session will be recorded for the purposes of retaining feedback via a transcript. Comments will be de-identified and the video deleted once the transcript checked and finalized. Individuals’ comments will not be shared with participants names or identifiable information.\n\nWhat was your previous knowledge of ggplot2 extension?\nPlease feel free to elaborate on any of your prior experiences with creating your own ggplot2 extensions.\nHow successful were you at completing the ‘Easy Geom Recipes’ tutorial?\nDo you have comments about accessibility, length, compellingness of the examples?\nIn what ways do you think it is successful? In what ways do you think it could be improved?\nDo you perceive any oversights or pitfalls to using this as an educational resource? Do you have any suggestions or concerns about the tutorial?\nWould you use this tutorial (or others like it) in the future? In what contexts?\nIf there is a computational geom that you think should exist, but you don’t have time to take it on, please describe that geom. (for example, geom_lm_residuals() is a new function in the package ggxmean. Is there something you’re always ‘drawing’ or would like to draw in ggplot2, but seems cumbersome to do in ‘base ggplot2’? perhaps there is a fair amount of precomputation.)\nHave you used other resources to learn about extending ggplot2? Which? How do they compare to ‘easy geom recipes’ tutorial’s approach?",
    "crumbs": [
      "Research",
      "Focus Group Script"
    ]
  },
  {
    "objectID": "focus_group_results_summary.html",
    "href": "focus_group_results_summary.html",
    "title": "Focus Group Highlights",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nreadLines(\"../easy-geom-recipes-raw-data/ggplot2 extension focus group 1.vtt\")\nreadLines(\"../easy-geom-recipes-raw-data/Focus Group 2 ggplot2 easy geom recipes .vtt\")\n\n\n\n\n\n\n’… going through this was super helpful cuz now I like understand the mechanics of it all.\n\n\n‘And so I don’t have any intentions of like making formal geoms on my own for anything yet. But it was like really helpful for understanding how the whole system works.’\n\n\n\n\n\n‘So like there’s some other layer of getting into the ggplot extension world that I [was] missing.’\n\n\n\n\n\n’So pedagogically, I liked how it was. I like the the general like steps like start with like make the GEOM manually with regular ggplot and Step 0 just to have like a baseline and then going to each of the steps to get there and then being able to compare with the original like as far as like pedagogically, that was super helpful. Just as as an approach to to get it right just so you can have a goal and see how all of these, these different primitives and proto elements and whatever fit together… in such done that really helpful.",
    "crumbs": [
      "Focus Group",
      "Focus Group Highlights"
    ]
  },
  {
    "objectID": "focus_group_results_summary.html#r-markdown",
    "href": "focus_group_results_summary.html#r-markdown",
    "title": "Focus Group Highlights",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nreadLines(\"../easy-geom-recipes-raw-data/ggplot2 extension focus group 1.vtt\")\nreadLines(\"../easy-geom-recipes-raw-data/Focus Group 2 ggplot2 easy geom recipes .vtt\")\n\n\n\n\n\n\n’… going through this was super helpful cuz now I like understand the mechanics of it all.\n\n\n‘And so I don’t have any intentions of like making formal geoms on my own for anything yet. But it was like really helpful for understanding how the whole system works.’\n\n\n\n\n\n‘So like there’s some other layer of getting into the ggplot extension world that I [was] missing.’\n\n\n\n\n\n’So pedagogically, I liked how it was. I like the the general like steps like start with like make the GEOM manually with regular ggplot and Step 0 just to have like a baseline and then going to each of the steps to get there and then being able to compare with the original like as far as like pedagogically, that was super helpful. Just as as an approach to to get it right just so you can have a goal and see how all of these, these different primitives and proto elements and whatever fit together… in such done that really helpful.",
    "crumbs": [
      "Focus Group",
      "Focus Group Highlights"
    ]
  },
  {
    "objectID": "focus_group_results_summary.html#including-plots",
    "href": "focus_group_results_summary.html#including-plots",
    "title": "focus_group_results_summary",
    "section": "Including Plots",
    "text": "Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot.",
    "crumbs": [
      "Focus Group",
      "focus_group_results_summary"
    ]
  },
  {
    "objectID": "focus_group_highlights.html",
    "href": "focus_group_highlights.html",
    "title": "Focus Group Highlights",
    "section": "",
    "text": "mechanics\n\n’… going through this was super helpful because now I like understand the mechanics of it all.\n\n\n‘And so I don’t have any intentions of like making formal geoms on my own for anything yet. But it was like really helpful for understanding how the whole system works.’\n\n\n\nfailure w/ previous attempts\n\n‘So like there’s some other layer of getting into the ggplot extension world that I [was] missing.’\n\n\n\nStep-by-step and including Step 0\n\n’So pedagogically, I liked how it was. I like the general steps. Like start with … regular ggplot and Step 0 just to have like a baseline. And then going to each of the steps to get there and then being able to compare with the original. Like as far as like pedagogically, that was super helpful just as as an approach to get it right just so you can have a goal. And see how all of these different primitives and proto elements and whatever fit together.\n\n\n\nSkepticism\n\nIt was that easy. And I felt empowered as a result of that…. But you know, like, my problem isn’t gonna be that easy.\n\n\n\nConcern regarding missing values\n\nA place where you might have an opportunity to do a little bit of pedagogical caution [is with] missing values. So when computing a mean like ggplot says, by the way, there were three rows I didn’t plot…. So then you need to explicitly override the default and that something like that so that people are not just blindly putting summaries down without considering the data that are being used to make them.\n\n\n\nAccessibility for students\n\nI’m teaching, so I’m teaching data visualization this summer online again with my regular like online classes I’ve assigning [the tutorial]… as kind of like an extra credit thing at the end of semester to saying like, if you’re interested, go through this thing and you get 10 bonus points or something just for the more advanced students that will be in the class that will be interested. But I think it’s totally accessible for them.\n\n\n\nHigher level objectives\n\nI’ll just add that I I think we, I could definitely use materials like this and it did raise for me the points since I didn’t have a lot of experience writing extensions before like it was ended up being very comprehensible to me and so it kind of made me think that in like a data visuals, data visualization classes that we teach, we probably need to. There’s a balance between teaching the students to use the tools that exist right now to like, just do your analysis and just do the best with the tools that are available. But we probably should include a couple of weeks on like. You know, programming and writing extensions along these lines, because it’s obviously like very powerful and they need to have at least some exposure to it. So you know, a week or two weeks of materials kind of like this would be helpful and would help distinguish them from like being able to just work through tutorials on your own online. Like, if they could write their own extension, that’s like real value added, you know, to their organization. So it it made me think that I need to think about my data visualization class A little bit more as a programming class in some ways. And I thought that would be a good. You know, this is pretty good material along those lines.\n\n\n\nRelationship to writing functions\n\n[A useful addition might be] trying to clarify a little bit more when it’s useful to have your own custom Geom, as opposed to your own function."
  },
  {
    "objectID": "focus_group_highlights.html#r-markdown",
    "href": "focus_group_highlights.html#r-markdown",
    "title": "Focus Group Highlights",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n\n\n\n\n’… going through this was super helpful cuz now I like understand the mechanics of it all.\n\n\n‘And so I don’t have any intentions of like making formal geoms on my own for anything yet. But it was like really helpful for understanding how the whole system works.’\n\n\n\n\n\n‘So like there’s some other layer of getting into the ggplot extension world that I [was] missing.’\n\n\n\n\n\n’So pedagogically, I liked how it was. I like the the general like steps like start with like make the GEOM manually with regular ggplot and Step 0 just to have like a baseline and then going to each of the steps to get there and then being able to compare with the original like as far as like pedagogically, that was super helpful. Just as as an approach to to get it right just so you can have a goal and see how all of these, these different primitives and proto elements and whatever fit together… in such done that really helpful."
  },
  {
    "objectID": "2023_easy_geom_recipes.html",
    "href": "2023_easy_geom_recipes.html",
    "title": "easy geom recipes",
    "section": "",
    "text": "Using ggplot2 has been described as writing ‘graphical poems’. But we may feel at a loss for ‘words’ when functions we’d like to have don’t exist. The ggplot2 extension system allows us to build new ‘vocabulary’ for fluent expression.\nAn exciting extension mechanism is that of inheriting from existing, more primitive geoms after performing some calculation.\nTo get your feet wet in this world and give you a taste of patterns for geom extension, we provide three basic examples of the geoms_ that inherit from existing geoms (point, text, segment, etc) along with a practice exercise. With such geoms, calculation is done under the hood by the ggplot2 system.\nWith these geom, you can write new graphical poems with exciting new graphical ‘words’!\nThis tutorial is intended for individuals who already have a working knowledge of the grammar of ggplot2, but may like to build a richer vocabulary for themselves."
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done",
    "href": "2023_easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done",
    "title": "easy geom recipes",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\npenguins &lt;- remove_missing(penguins)\n\n\npenguins_medians &lt;- penguins %&gt;% \n  summarize(bill_length_mm_median = median(bill_length_mm),\n            bill_depth_mm_median = median(bill_depth_mm))\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm) + \n  aes(y = bill_length_mm) + \n  geom_point() + \n  geom_point(data = penguins_medians,\n    color = \"red\", size = 4,\n             aes(x = bill_depth_mm_median,\n                 y = bill_length_mm_median))"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-1-computation",
    "href": "2023_easy_geom_recipes.html#step-1-computation",
    "title": "easy geom recipes",
    "section": "Step 1: computation",
    "text": "Step 1: computation\n\ndefine computation that ggplot2 should do for you, before plotting\n\nhere it’s computing a variable with labels for each observation\n\ntest that functionality Step 1.b\n\n\n# Step 1.a\ncompute_group_xy_medians &lt;- function(data, scales){ #  scales is used internally in ggplot2\n  data %&gt;% \n    summarize(x = median(x),\n            y = median(y))\n}\n\n# Step 1.b\npenguins %&gt;%\n  rename(x = bill_depth_mm,       # ggplot2 will work with 'aes' column names\n         y = bill_length_mm) %&gt;%  # therefore rename is required to used the compute function\n  compute_group_xy_medians()\n\n# A tibble: 1 × 2\n      x     y\n  &lt;dbl&gt; &lt;dbl&gt;\n1  17.3  44.5"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-2-define-ggproto",
    "href": "2023_easy_geom_recipes.html#step-2-define-ggproto",
    "title": "easy geom recipes",
    "section": "Step 2: define ggproto",
    "text": "Step 2: define ggproto\nThings to notice\n\nwhat’s the naming convention for the proto object?\nwhich aesthetics are required as inputs?\nwhere does the function from above go?\n\n\nStatXYMedians &lt;- ggplot2::ggproto(`_class` = \"StatXYMedians\",\n                                  `_inherit` = ggplot2::Stat,\n                                  required_aes = c(\"x\", \"y\"),\n                                  compute_group = compute_group_xy_medians)"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-3-define-geom_-function",
    "href": "2023_easy_geom_recipes.html#step-3-define-geom_-function",
    "title": "easy geom recipes",
    "section": "Step 3: define geom_* function",
    "text": "Step 3: define geom_* function\nThings to notice\n\nWhere does our work up to this point enter in?\nWhat more primitive geom will we inherit behavior from?\n\n\ngeom_point_xy_medians &lt;- function(mapping = NULL, data = NULL,\n                           position = \"identity\", na.rm = FALSE,\n                           show.legend = NA,\n                           inherit.aes = TRUE, ...) {\n  ggplot2::layer(\n    stat = StatXYMedians,        # proto object from step 2\n    geom = ggplot2::GeomPoint,   # inherit other behavior\n    data = data, \n    mapping = mapping,\n    position = position, \n    show.legend = show.legend, \n    inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-4-enjoy-use-your-function",
    "href": "2023_easy_geom_recipes.html#step-4-enjoy-use-your-function",
    "title": "easy geom recipes",
    "section": "Step 4: Enjoy! Use your function",
    "text": "Step 4: Enjoy! Use your function\n\npenguins %&gt;%\n  ggplot()+\n  aes(x = bill_depth_mm, y = bill_length_mm)+\n  geom_point()+\n  geom_point_xy_medians(color = \"red\")\n\n\n\n\n\n\n\n\n\nAnd check out conditionality!\n\npenguins %&gt;%\n  ggplot()+\n  aes(x = bill_depth_mm, \n      y = bill_length_mm, \n      color = species)+\n  geom_point()+\n  geom_point_xy_medians(size = 4)"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-1",
    "href": "2023_easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-1",
    "title": "easy geom recipes",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\ncars %&gt;% \n  mutate(id_number = 1:n()) %&gt;% \n  ggplot() + \n  aes(x = speed, y = dist) + \n  geom_point() + \n  geom_label(aes(label = id_number), \n             hjust = 1.2)"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-1-computation-1",
    "href": "2023_easy_geom_recipes.html#step-1-computation-1",
    "title": "easy geom recipes",
    "section": "Step 1: computation",
    "text": "Step 1: computation\n\n# you won't use the scales argument, but ggplot will later\ncompute_group_row_number &lt;- function(data, scales){\n  \n  data %&gt;% \n    # add an additional column called label\n    # the geom we inherit from requires the label aesthetic\n    mutate(label = 1:n())\n  \n}\n\n# step 1b test the computation function \ncars %&gt;% \n  # input must have required aesthetic inputs as columns\n  rename(x = speed, y = dist) %&gt;% \n  compute_group_row_number() %&gt;% \n  head()\n\n  x  y label\n1 4  2     1\n2 4 10     2\n3 7  4     3\n4 7 22     4\n5 8 16     5\n6 9 10     6"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-2-define-ggproto-1",
    "href": "2023_easy_geom_recipes.html#step-2-define-ggproto-1",
    "title": "easy geom recipes",
    "section": "Step 2: define ggproto",
    "text": "Step 2: define ggproto\n\nStatRownumber &lt;- ggplot2::ggproto(`_class` = \"StatRownumber\",\n                                  `_inherit` = ggplot2::Stat,\n                                  required_aes = c(\"x\", \"y\"),\n                                  compute_group = compute_group_row_number)"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-3-define-geom_-function-1",
    "href": "2023_easy_geom_recipes.html#step-3-define-geom_-function-1",
    "title": "easy geom recipes",
    "section": "Step 3: define geom_* function",
    "text": "Step 3: define geom_* function\n\ndefine the stat and geom for your layer\n\n\ngeom_label_row_number &lt;- function(mapping = NULL, data = NULL,\n                           position = \"identity\", na.rm = FALSE,\n                           show.legend = NA,\n                           inherit.aes = TRUE, ...) {\n  ggplot2::layer(\n    stat = StatRownumber, # proto object from Step 2\n    geom = ggplot2::GeomLabel, # inherit other behavior\n    data = data, \n    mapping = mapping,\n    position = position, \n    show.legend = show.legend, \n    inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-4-enjoy-use-your-function-1",
    "href": "2023_easy_geom_recipes.html#step-4-enjoy-use-your-function-1",
    "title": "easy geom recipes",
    "section": "Step 4: Enjoy! Use your function",
    "text": "Step 4: Enjoy! Use your function\n\ncars %&gt;% \n  ggplot() + \n  aes(x = speed, y = dist) + \n  geom_point() + \n  geom_label_row_number(hjust = 1.2) # function in action\n\n\n\n\n\n\n\n\n\nAnd check out conditionality!\n\nlast_plot() + \n  aes(color = dist &gt; 60) # Computation is within group"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-2",
    "href": "2023_easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-2",
    "title": "easy geom recipes",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\nmodel &lt;- lm(formula = bill_length_mm ~ bill_depth_mm, \n            data = penguins) \n\npenguins_w_fitted &lt;- penguins %&gt;% \n  mutate(fitted = model$fitted.values)\n\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method = \"lm\", se = F) + \n  geom_point(data = penguins_w_fitted,\n             aes(y = fitted),\n             color = \"blue\")"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-1-computation-2",
    "href": "2023_easy_geom_recipes.html#step-1-computation-2",
    "title": "easy geom recipes",
    "section": "Step 1: computation",
    "text": "Step 1: computation\n\ncompute_group_lm_fitted&lt;- function(data, scales){\n  model&lt;-lm(formula= y ~ x, data = data)\n  data %&gt;% \n    mutate(y=model$fitted.values)\n}\n\n# test out the function\npenguins %&gt;%\n  # rename to explicitly state the x and y inputs\n  rename(x = bill_depth_mm, y = bill_length_mm)%&gt;%\n  compute_group_lm_fitted()\n\n# A tibble: 333 × 8\n   species island        y     x flipper_length_mm body_mass_g sex     year\n   &lt;fct&gt;   &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;fct&gt;  &lt;int&gt;\n 1 Adelie  Torgersen  43.0  18.7               181        3750 male    2007\n 2 Adelie  Torgersen  43.8  17.4               186        3800 female  2007\n 3 Adelie  Torgersen  43.5  18                 195        3250 female  2007\n 4 Adelie  Torgersen  42.6  19.3               193        3450 female  2007\n 5 Adelie  Torgersen  41.8  20.6               190        3650 male    2007\n 6 Adelie  Torgersen  43.6  17.8               181        3625 female  2007\n 7 Adelie  Torgersen  42.4  19.6               195        4675 male    2007\n 8 Adelie  Torgersen  43.7  17.6               182        3200 female  2007\n 9 Adelie  Torgersen  41.4  21.2               191        3800 male    2007\n10 Adelie  Torgersen  41.5  21.1               198        4400 male    2007\n# ℹ 323 more rows"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-2-define-ggproto-2",
    "href": "2023_easy_geom_recipes.html#step-2-define-ggproto-2",
    "title": "easy geom recipes",
    "section": "Step 2: define ggproto",
    "text": "Step 2: define ggproto\n\nStatLmFitted&lt;-ggplot2::ggproto(`_class` = \"StatLmFitted\",\n                                  `_inherit` = ggplot2::Stat,\n                                  required_aes = c(\"x\", \"y\"),\n                                  compute_group = compute_group_lm_fitted)"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-3-define-geom_-function-2",
    "href": "2023_easy_geom_recipes.html#step-3-define-geom_-function-2",
    "title": "easy geom recipes",
    "section": "Step 3: define geom_* function",
    "text": "Step 3: define geom_* function\n\ngeom_point_lm_fitted &lt;- function(mapping = NULL, data = NULL,\n                           position = \"identity\", na.rm = FALSE,\n                           show.legend = NA,\n                           inherit.aes = TRUE, ...) {\n  ggplot2::layer(\n    stat = StatLmFitted, # proto object from step 2\n    geom = ggplot2::GeomPoint, # inherit other behavior\n    data = data, \n    mapping = mapping,\n    position = position, \n    show.legend = show.legend, \n    inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-4-enjoy-use-your-function-2",
    "href": "2023_easy_geom_recipes.html#step-4-enjoy-use-your-function-2",
    "title": "easy geom recipes",
    "section": "Step 4: Enjoy! Use your function",
    "text": "Step 4: Enjoy! Use your function\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method=\"lm\", se= F)+\n  geom_point_lm_fitted(color=\"blue\")\n\n\n\n\n\n\n\n\n\nAnd check out conditionality\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method=\"lm\", se= F) +\n  geom_point_lm_fitted() + \n  facet_wrap(facets = vars(species))"
  },
  {
    "objectID": "2023_easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-3",
    "href": "2023_easy_geom_recipes.html#step-0-use-base-ggplot2-to-get-the-job-done-3",
    "title": "easy geom recipes",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\n# step 0: use base ggplot2\nmodel &lt;- lm(formula = bill_length_mm ~ bill_depth_mm, \n            data = penguins) \n\npenguins_w_fitted &lt;- penguins %&gt;% \n  mutate(fitted = model$fitted.values)\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method = \"lm\", se = F) + \n  geom_segment(data = penguins_w_fitted,\n             aes(yend = fitted, xend = bill_depth_mm),\n             color = \"blue\")\n\n\n\n\n\n\n\n# step 1: write your compute_group function (and test)\n\n# step 2: write ggproto with compute_group as an input\n\n# step 3: write your geom_*() function with ggproto as an input\n\n# step 4: enjoy!\n\n\nNot interested in writing your own geoms?\nCheck out some ready-to-go geoms that might be of interest in the ggxmean package… or other extension packages.\nInterested in working a bit more with geoms and making them available to more folks, but not interested in writing your own package?\nJoin in on the development and validation of the ggxmean package for statistical educators and everyday analysis!"
  },
  {
    "objectID": "survey_instrument.html",
    "href": "survey_instrument.html",
    "title": "Survey instrument",
    "section": "",
    "text": "Single choice.\nq05_levels &lt;- c(\"For more than ten years\",\n\"Between five and ten years\",\n\"Between two and five years\",\n\"Between one and two years\",\n\"Less than a year\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#for-how-long-have-you-used-the-r-programming-language",
    "href": "survey_instrument.html#for-how-long-have-you-used-the-r-programming-language",
    "title": "Survey instrument",
    "section": "",
    "text": "Single choice.\nq05_levels &lt;- c(\"For more than ten years\",\n\"Between five and ten years\",\n\"Between two and five years\",\n\"Between one and two years\",\n\"Less than a year\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#how-frequently-do-you-use-the-r-programming-language",
    "href": "survey_instrument.html#how-frequently-do-you-use-the-r-programming-language",
    "title": "Survey instrument",
    "section": "2. How frequently do you use the R programming language?",
    "text": "2. How frequently do you use the R programming language?\nSingle choice.\n\nq06_levels &lt;- c(\"Almost every day\",\n\"Several times a week\",\n\"Several times a month\",\n\"Several times a year\",\n\"Never\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#how-frequently-do-you-use-the-ggplot2-package-to-build-plots",
    "href": "survey_instrument.html#how-frequently-do-you-use-the-ggplot2-package-to-build-plots",
    "title": "Survey instrument",
    "section": "3. How frequently do you use the ggplot2 package to build plots?",
    "text": "3. How frequently do you use the ggplot2 package to build plots?\nSingle choice.\n\nq07_levels &lt;- \n  c('Almost every day',\n'Several times a week',\n'Several times a month',\n'Several times a year',\n'Never')",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#how-frequently-do-you-write-your-own-functions-in-r",
    "href": "survey_instrument.html#how-frequently-do-you-write-your-own-functions-in-r",
    "title": "Survey instrument",
    "section": "4. How frequently do you write your own functions in R?",
    "text": "4. How frequently do you write your own functions in R?\nSingle choice.\n\nq08_levels &lt;- \n  c('Almost every day',\n'Several times a week',\n'Several times a month',\n'Several times a year',\n'Never')",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#in-which-of-the-following-contexts-do-you-usually-use-ggplot2",
    "href": "survey_instrument.html#in-which-of-the-following-contexts-do-you-usually-use-ggplot2",
    "title": "Survey instrument",
    "section": "5. In which of the following contexts do you usually use ggplot2?",
    "text": "5. In which of the following contexts do you usually use ggplot2?\nMultiple choice.\n\nq09_levels &lt;- \n  c('Teaching',\n    'Academic Research',\n    'Analytics for my employer',\n    'Personal Projects')",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#prior-to-testing-the-tutorial-which-of-the-following-best-describes-your-previous-experience-with-ggplot2-extension-i.e.-theme_-geom_-scale_-coord_-facet_-functions-outside-of-base-ggplot2.",
    "href": "survey_instrument.html#prior-to-testing-the-tutorial-which-of-the-following-best-describes-your-previous-experience-with-ggplot2-extension-i.e.-theme_-geom_-scale_-coord_-facet_-functions-outside-of-base-ggplot2.",
    "title": "Survey instrument",
    "section": "6. Prior to testing the tutorial, which of the following best describes your previous experience with ggplot2 extension, i.e. theme_(), geom_(), scale_(), coord_(), facet_*() functions outside of ‘base ggplot2’.",
    "text": "6. Prior to testing the tutorial, which of the following best describes your previous experience with ggplot2 extension, i.e. theme_(), geom_(), scale_(), coord_(), facet_*() functions outside of ‘base ggplot2’.\nSingle choice.\n\nq10_levels &lt;- c(\"I didn't know about any extension mechanisms!\",\n                      \"I knew about extension system and ggplot2 extension packages but haven't created any extension myself\",\n                      \"I've tried to write extensions (new themes, scales, geoms, facets), but was not successful.\",\n                      \"I've successfully written ggplot2 extensions\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#mark-any-of-the-following-elements-you-tried-to-extend-prior-to-taking-the-easy-geom-recipes-tutorial-with-the-outcome-successful-or-unsuccessful",
    "href": "survey_instrument.html#mark-any-of-the-following-elements-you-tried-to-extend-prior-to-taking-the-easy-geom-recipes-tutorial-with-the-outcome-successful-or-unsuccessful",
    "title": "Survey instrument",
    "section": "7. Mark any of the following elements you tried to extend prior to taking the ‘easy geom recipes tutorial’, with the outcome (successful or unsuccessful):",
    "text": "7. Mark any of the following elements you tried to extend prior to taking the ‘easy geom recipes tutorial’, with the outcome (successful or unsuccessful):\nMultiple choice.\n\nc('theme_*(), successful',\n'theme_*(), unsuccessful',\n'scales_*(), successful',\n'scales_*(), unsuccessful',\n'position, successful',\n'position, unsuccessful',\n'geom_*()/stat_*(), successful',\n'geom_*()/stat_*(), unsuccessful',\n'coord_*(), successful',\n'coord_*(), unsuccessful',\n'facet_*(), successful',\n'facet_*(), unsuccessful') -&gt;\nq11_levels",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#please-feel-free-to-elaborate-on-any-of-your-prior-experiences-with-creating-your-own-ggplot2-extension.",
    "href": "survey_instrument.html#please-feel-free-to-elaborate-on-any-of-your-prior-experiences-with-creating-your-own-ggplot2-extension.",
    "title": "Survey instrument",
    "section": "8. Please feel free to elaborate on any of your prior experiences with creating your own ggplot2 extension.",
    "text": "8. Please feel free to elaborate on any of your prior experiences with creating your own ggplot2 extension.\nSingle line text.",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#prior-to-completion-of-the-tutorial-which-of-the-following-describe-your-experiences-with-object-oriented-programming-oop",
    "href": "survey_instrument.html#prior-to-completion-of-the-tutorial-which-of-the-following-describe-your-experiences-with-object-oriented-programming-oop",
    "title": "Survey instrument",
    "section": "9. Prior to completion of the tutorial, which of the following describe your experiences with object oriented programming (OOP)?",
    "text": "9. Prior to completion of the tutorial, which of the following describe your experiences with object oriented programming (OOP)?\nMultiple choice.\n\nq13_levels &lt;- \n  c(\"I'd used ggproto for ggplot2 extension\",\n    \"I'd used one of the following R OOP systems: S3, R6, S4, S7/R7\",\n    \"I'd used object oriented programming techniques in programming languages other than R\",\n    \"I had no prior OOP experience.\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#which-of-the-following-easy-geom-recipes-tutorial-did-you-attempt",
    "href": "survey_instrument.html#which-of-the-following-easy-geom-recipes-tutorial-did-you-attempt",
    "title": "Survey instrument",
    "section": "10. Which of the following ‘easy geom recipes’ tutorial did you attempt?",
    "text": "10. Which of the following ‘easy geom recipes’ tutorial did you attempt?\nMultiple choice.\n\nq14_levels &lt;- \n  c('geom_point_xy_means() which used geom_point_xy_medians() as a reference',\n    'geom_text_coordinates() which used geom_text_id() as a reference',\n    'geom_segment_lm_residuals() which used geom_point_lm_fitted() as a reference')",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#which-of-the-following-easy-geom-recipes-tutorial-did-you-successfully-complete",
    "href": "survey_instrument.html#which-of-the-following-easy-geom-recipes-tutorial-did-you-successfully-complete",
    "title": "Survey instrument",
    "section": "11. Which of the following ‘easy geom recipes’ tutorial did you successfully complete?",
    "text": "11. Which of the following ‘easy geom recipes’ tutorial did you successfully complete?\nMultiple choice.\n\nq15_levels &lt;- c(\n  'geom_point_xy_means()',\n  'geom_text_coordinates()',\n  'geom_segment_lm_residuals()'\n)",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#for-each-recipe-you-attempted-how-long-would-you-estimate-the-time-taken",
    "href": "survey_instrument.html#for-each-recipe-you-attempted-how-long-would-you-estimate-the-time-taken",
    "title": "Survey instrument",
    "section": "12. For each recipe you attempted, how long would you estimate the time taken",
    "text": "12. For each recipe you attempted, how long would you estimate the time taken\non average?Single choice.\n\nq16_levels &lt;- \n  c('5-15 minutes',\n    '15-30 minutes',\n    '30-45 minutes',\n    '45-60 minutes',\n    '1-2 hours',\n    'more than 2 hours')",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#what-would-you-say-about-the-length-of-the-tutorial-content",
    "href": "survey_instrument.html#what-would-you-say-about-the-length-of-the-tutorial-content",
    "title": "Survey instrument",
    "section": "13. What would you say about the length of the tutorial content?",
    "text": "13. What would you say about the length of the tutorial content?\nSingle choice.\n\nq17_levels &lt;- c(\"The tutorial length was about right\", \n                     \"The tutorial was too long\", \n                     \"The tutorial was too short\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#what-would-you-say-about-the-clarity-of-the-examples-and-contentsingle-choice.",
    "href": "survey_instrument.html#what-would-you-say-about-the-clarity-of-the-examples-and-contentsingle-choice.",
    "title": "Survey instrument",
    "section": "14. What would you say about the clarity of the examples and contentSingle choice.",
    "text": "14. What would you say about the clarity of the examples and contentSingle choice.\n\nq18_levels &lt;- c(\"The examples were easy to follow\",\n                \"The examples weren't always initially clear, but I ultimately managed to understand intent.\",\n                    \"I didn't follow the examples.\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#did-you-find-the-examples-interestingengaging",
    "href": "survey_instrument.html#did-you-find-the-examples-interestingengaging",
    "title": "Survey instrument",
    "section": "15. Did you find the examples interesting/engaging?",
    "text": "15. Did you find the examples interesting/engaging?\nSingle choice.\n\nq19_levels &lt;- c(\"In general, I did not find the examples interesting or engaging\",\n                        \"In general, I did find the examples interesting or engaging\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#please-provide-any-additional-feedback-on-the-tutorial.-in-what-ways-do-you-think-it-is-successful-in-what-ways-do-you-think-it-could-be-improved-do-you-perceive-any-oversights-or-pitfalls-to-using-this-as-an-educational-resource",
    "href": "survey_instrument.html#please-provide-any-additional-feedback-on-the-tutorial.-in-what-ways-do-you-think-it-is-successful-in-what-ways-do-you-think-it-could-be-improved-do-you-perceive-any-oversights-or-pitfalls-to-using-this-as-an-educational-resource",
    "title": "Survey instrument",
    "section": "16. Please provide any additional feedback on the tutorial. In what ways do you think it is successful? In what ways do you think it could be improved? Do you perceive any oversights or pitfalls to using this as an educational resource?",
    "text": "16. Please provide any additional feedback on the tutorial. In what ways do you think it is successful? In what ways do you think it could be improved? Do you perceive any oversights or pitfalls to using this as an educational resource?\nSingle line text.",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#which-of-the-following-were-your-emotional-responses-to-the-tutorial",
    "href": "survey_instrument.html#which-of-the-following-were-your-emotional-responses-to-the-tutorial",
    "title": "Survey instrument",
    "section": "17. Which of the following were your emotional response(s) to the tutorial",
    "text": "17. Which of the following were your emotional response(s) to the tutorial\nMultiple choice.\n\nq21_levels &lt;- \n  c(\"frustration\", \n    \"satisfaction\", \n    \"indifference\", \n    \"gloom\", \n    \"delight\", \n    \"skepticism\", \n    \"excitement\", \n    \"curiosity\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#how-likely-are-you-to-use-the-extension-mechanism-demonstrated-in-the-tutorial-in-the-future.single-choice.",
    "href": "survey_instrument.html#how-likely-are-you-to-use-the-extension-mechanism-demonstrated-in-the-tutorial-in-the-future.single-choice.",
    "title": "Survey instrument",
    "section": "18. How likely are you to use the extension mechanism demonstrated in the tutorial in the future.Single choice.",
    "text": "18. How likely are you to use the extension mechanism demonstrated in the tutorial in the future.Single choice.\n\nq22_levels &lt;- c('Very likely - I already have ideas for how to use!',\n                       'Somewhat likely',\n                       'Neither likely nor unlikely',\n                       'Somewhat unlikely',\n                       'Very unlikely')",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#how-likely-would-you-be-to-use-extension-functions-like-the-ones-in-the-tutorial-if-already-in-a-package-e.g.-functions-in-ggxmean-many-demoed-here-httpsevamaerey.github.ioggxmeanflipbook.htmlsingle-choice.",
    "href": "survey_instrument.html#how-likely-would-you-be-to-use-extension-functions-like-the-ones-in-the-tutorial-if-already-in-a-package-e.g.-functions-in-ggxmean-many-demoed-here-httpsevamaerey.github.ioggxmeanflipbook.htmlsingle-choice.",
    "title": "Survey instrument",
    "section": "19. How likely would you be to use extension functions like the ones in the tutorial, if already in a package (e.g. functions in ggxmean, many demoed here: https://evamaerey.github.io/ggxmean/flipbook.html)Single choice.",
    "text": "19. How likely would you be to use extension functions like the ones in the tutorial, if already in a package (e.g. functions in ggxmean, many demoed here: https://evamaerey.github.io/ggxmean/flipbook.html)Single choice.\n\nq23_levels &lt;- c('Very likely', \n                       'Somewhat likely', \n                       'Neither likely nor unlikely', \n                       'Somewhat unlikely', \n                       'Very unlikely')",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#do-you-have-any-suggestions-or-concerns-about-the-tutorial-we-can-discuss-further-at-the-focus-group-having-initial-comments-might-be-a-useful-jumping-off-point-for-that-please-feel-free-to-bring-in-your-experience-in-programmingstatisticsdata-science-pedagogysingle-line-text.",
    "href": "survey_instrument.html#do-you-have-any-suggestions-or-concerns-about-the-tutorial-we-can-discuss-further-at-the-focus-group-having-initial-comments-might-be-a-useful-jumping-off-point-for-that-please-feel-free-to-bring-in-your-experience-in-programmingstatisticsdata-science-pedagogysingle-line-text.",
    "title": "Survey instrument",
    "section": "20. Do you have any suggestions or concerns about the tutorial? (we can discuss further at the focus group, having initial comments might be a useful jumping off point for that) Please feel free to bring in your experience in programming/statistics/data science pedagogy?Single line text.",
    "text": "20. Do you have any suggestions or concerns about the tutorial? (we can discuss further at the focus group, having initial comments might be a useful jumping off point for that) Please feel free to bring in your experience in programming/statistics/data science pedagogy?Single line text.\nNo answer provided.",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#if-there-is-a-computational-geom-that-you-think-should-exist-but-you-dont-have-time-to-take-it-on-please-describe-that-geom.-for-example-geom_lm_residuals-is-a-new-function-in-the-package-ggxmean.-is-there-something-youre-always-drawing-or-would-like-to-draw-in-ggplot2-but-seems-cumbersome-to-do-in-base-ggplot2-single-line-text.",
    "href": "survey_instrument.html#if-there-is-a-computational-geom-that-you-think-should-exist-but-you-dont-have-time-to-take-it-on-please-describe-that-geom.-for-example-geom_lm_residuals-is-a-new-function-in-the-package-ggxmean.-is-there-something-youre-always-drawing-or-would-like-to-draw-in-ggplot2-but-seems-cumbersome-to-do-in-base-ggplot2-single-line-text.",
    "title": "Survey instrument",
    "section": "21. If there is a computational geom that you think should exist, but you don’t have time to take it on, please describe that geom. (for example, geom_lm_residuals() is a new function in the package ggxmean. Is there something you’re always drawing or would like to draw in ggplot2, but seems cumbersome to do in ‘base ggplot2’?) Single line text.",
    "text": "21. If there is a computational geom that you think should exist, but you don’t have time to take it on, please describe that geom. (for example, geom_lm_residuals() is a new function in the package ggxmean. Is there something you’re always drawing or would like to draw in ggplot2, but seems cumbersome to do in ‘base ggplot2’?) Single line text.\nNo answer provided.",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#how-long-have-you-taught-statistics-data-science-or-analytics",
    "href": "survey_instrument.html#how-long-have-you-taught-statistics-data-science-or-analytics",
    "title": "Survey instrument",
    "section": "22. How long have you taught statistics, data science, or analytics?",
    "text": "22. How long have you taught statistics, data science, or analytics?\nSingle choice.\n\nq26_levels &lt;- \n  c(\"One to two years\", \n    \"Three to five years\", \n    \"Five to ten years\", \n    \"More than ten years\", \n    \"Not applicable\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#do-you-think-this-tutorial-would-be-accessible-to-students",
    "href": "survey_instrument.html#do-you-think-this-tutorial-would-be-accessible-to-students",
    "title": "Survey instrument",
    "section": "23. Do you think this tutorial would be accessible to students?",
    "text": "23. Do you think this tutorial would be accessible to students?\nMultiple choice.\n\nq27_levels &lt;- \n  c(\"Yes;\", \"No;\")",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "survey_instrument.html#if-yes-please-feel-free-to-elaborate-on-how-you-might-use-such-a-tutorial-with-students.-your-comments-might-be-useful-jumping-off-points-for-the-focus-group.",
    "href": "survey_instrument.html#if-yes-please-feel-free-to-elaborate-on-how-you-might-use-such-a-tutorial-with-students.-your-comments-might-be-useful-jumping-off-points-for-the-focus-group.",
    "title": "Survey instrument",
    "section": "24. If yes, please feel free to elaborate on how you might use such a tutorial with students. (your comments might be useful jumping off points for the focus group).",
    "text": "24. If yes, please feel free to elaborate on how you might use such a tutorial with students. (your comments might be useful jumping off points for the focus group).\nSingle line text.",
    "crumbs": [
      "Survey",
      "Survey instrument"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html",
    "href": "easy_geom_recipes_compute_group.html",
    "title": "easy geom recipes: compute_group",
    "section": "",
    "text": "Using ggplot2 has been described as writing ‘graphical poems’. But we may feel at a loss for ‘words’ when functions we’d like to have don’t exist. The ggplot2 extension system allows us to build new ‘vocabulary’ for fluent expression.\nAn exciting extension mechanism is that of inheriting from existing, more primitive geoms after performing some calculation.\nTo get your feet wet in this world and give you a taste of patterns for geom extension, we provide three basic examples of the geoms_ that inherit from existing geoms (point, text, segment, etc) along with a practice exercise. With such geoms, calculation is done under the hood by the ggplot2 system. We’ll see how to define a ggproto object; in this tutorial we’ll keep things simple by only defining computation at the compute_group stage.\nWith new geom, you can write new graphical poems with exciting new graphical ‘words’!\nThis tutorial is intended for individuals who already have a working knowledge of the grammar of ggplot2, but may like to build a richer vocabulary for themselves.",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-0-use-base-ggplot2-to-get-the-job-done",
    "href": "easy_geom_recipes_compute_group.html#step-0-use-base-ggplot2-to-get-the-job-done",
    "title": "easy geom recipes: compute_group",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\npenguins_medians &lt;- penguins %&gt;% \n  summarize(bill_length_mm_median = median(bill_length_mm),\n            bill_depth_mm_median = median(bill_depth_mm))\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm) + \n  aes(y = bill_length_mm) + \n  geom_point() + \n  geom_point(data = penguins_medians,\n    color = \"red\", size = 4,\n             aes(x = bill_depth_mm_median,\n                 y = bill_length_mm_median))",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-1-computation",
    "href": "easy_geom_recipes_compute_group.html#step-1-computation",
    "title": "easy geom recipes: compute_group",
    "section": "Step 1: computation",
    "text": "Step 1: computation\n\ndefine computation that ggplot2 should do for you, before plotting\n\nhere it’s computing a variable with labels for each observation\n\ntest that functionality Step 1.b\n\n\n# Step 1.a\ncompute_group_xy_medians &lt;- function(data, scales){ #  scales is used internally in ggplot2\n  data %&gt;% \n    summarize(x = median(x),\n            y = median(y))\n}\n\n# Step 1.b\npenguins %&gt;%\n  # prep data to look like it will inside of ggplot2\n  rename(x = bill_depth_mm,       # ggplot2 will work with *aes* column names\n         y = bill_length_mm) %&gt;%  # therefore rename is required to used the compute function\n  select(x, y) %&gt;%  # ggplot will use only variables, i.e. variables mapped to aesthetics for your target layer\n  compute_group_xy_medians()\n\n# A tibble: 1 × 2\n      x     y\n  &lt;dbl&gt; &lt;dbl&gt;\n1  17.3  44.5",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-2-define-ggproto",
    "href": "easy_geom_recipes_compute_group.html#step-2-define-ggproto",
    "title": "easy geom recipes: compute_group",
    "section": "Step 2: define ggproto",
    "text": "Step 2: define ggproto\nIn the background, when you build ggplot2 plots, you are defining a plot specification. The + in ggplot2 and the proto system allows you to update your specification (changing the aesthetic mapping, adding layers, changing scales to be used, etc).\nThe ggproto function allows you to define a new class that’s usable within the ggplot2 ecosystem; that is, you can do updating using extension packages.\nhttps://ggplot2.tidyverse.org/reference/ggproto.html\nThings to notice:\n\nWhat’s the naming convention for the proto object? The name of your class is the same as the object you create; also, it is convention to use camel case for ggproto objects.\nWhat is the inherited class? In fact, your ggproto object is a subclass and you aren’t fully defining it. You inherit the class properties of ggplot2::Stat.\nWhich aesthetics are required as inputs? Generally, you will have required aesthetics; in this case, you specify that one must define the variable that goes on the x and y axis.\nWhere does the function from above go? We input the computational function defined above at the compute_group argument.\n\n\nStatXYMedians &lt;- ggplot2::ggproto(`_class` = \"StatXYMedians\",\n                                  `_inherit` = ggplot2::Stat,\n                                  required_aes = c(\"x\", \"y\"),\n                                  compute_group = compute_group_xy_medians)",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-3-define-geom_-function",
    "href": "easy_geom_recipes_compute_group.html#step-3-define-geom_-function",
    "title": "easy geom recipes: compute_group",
    "section": "Step 3: define geom_* function",
    "text": "Step 3: define geom_* function\nThings to notice\n\nWhere does our work up to this point enter in?\nWhat more primitive geom will we inherit behavior from?\n\n\ngeom_point_xy_medians &lt;- function(mapping = NULL, data = NULL,\n                           position = \"identity\", na.rm = FALSE,\n                           show.legend = NA,\n                           inherit.aes = TRUE, ...) {\n  ggplot2::layer(\n    stat = StatXYMedians,        # proto object from step 2\n    geom = ggplot2::GeomPoint,   # inherit other behavior\n    data = data, \n    mapping = mapping,\n    position = position, \n    show.legend = show.legend, \n    inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-4-enjoy-use-your-function",
    "href": "easy_geom_recipes_compute_group.html#step-4-enjoy-use-your-function",
    "title": "easy geom recipes: compute_group",
    "section": "Step 4: Enjoy! Use your function",
    "text": "Step 4: Enjoy! Use your function\n\npenguins %&gt;%\n  ggplot() +\n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() +\n  geom_point_xy_medians(color = \"red\", size = 4)\n\n\n\n\n\n\n\n\n\nAnd check out conditionality!\n\npenguins %&gt;%\n  ggplot()+\n  aes(x = bill_depth_mm, \n      y = bill_length_mm, \n      color = species)+\n  geom_point()+\n  geom_point_xy_medians(size = 8)\n\n\n\n\n\n\n\n\n\n\nOptional: use ggplot2::layer_data to inspect the data ggplot2 prepared in the background\n\nlayer_data(last_plot(), \n           i = 2) # indicate which layer from the last plot\n\n   colour     x     y PANEL group shape size fill alpha stroke\n1 #F8766D 18.40 38.85     1     1    19    8   NA    NA    0.5\n2 #00BA38 18.45 49.55     1     2    19    8   NA    NA    0.5\n3 #619CFF 15.00 47.40     1     3    19    8   NA    NA    0.5",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-0-use-base-ggplot2-to-get-the-job-done-1",
    "href": "easy_geom_recipes_compute_group.html#step-0-use-base-ggplot2-to-get-the-job-done-1",
    "title": "easy geom recipes: compute_group",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\n# step 0.a\ncars %&gt;% \n  mutate(id_number = 1:n()) %&gt;% \n  ggplot() + \n  aes(x = speed, y = dist) + \n  geom_point() + \n  geom_label(aes(label = id_number), \n             hjust = 1.2)\n\n\n\n\n\n\n\n# step 0.b\nlayer_data(last_plot(), i = 2) %&gt;% \n  head()\n\n  label x  y PANEL group colour  fill size angle hjust vjust alpha family\n1     1 4  2     1    -1  black white 3.88     0   1.2   0.5    NA       \n2     2 4 10     1    -1  black white 3.88     0   1.2   0.5    NA       \n3     3 7  4     1    -1  black white 3.88     0   1.2   0.5    NA       \n4     4 7 22     1    -1  black white 3.88     0   1.2   0.5    NA       \n5     5 8 16     1    -1  black white 3.88     0   1.2   0.5    NA       \n6     6 9 10     1    -1  black white 3.88     0   1.2   0.5    NA       \n  fontface lineheight\n1        1        1.2\n2        1        1.2\n3        1        1.2\n4        1        1.2\n5        1        1.2\n6        1        1.2",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-1-computation-1",
    "href": "easy_geom_recipes_compute_group.html#step-1-computation-1",
    "title": "easy geom recipes: compute_group",
    "section": "Step 1: computation",
    "text": "Step 1: computation\n\n# you won't use the scales argument, but ggplot will later\ncompute_group_row_number &lt;- function(data, scales){\n  \n  data %&gt;% \n    # add an additional column called label\n    # the geom we inherit from requires the label aesthetic\n    mutate(label = 1:n())\n  \n}\n\n# step 1b test the computation function \ncars %&gt;% \n  # input must have required aesthetic inputs as columns\n  rename(x = speed, y = dist) %&gt;% \n  compute_group_row_number() %&gt;% \n  head()\n\n  x  y label\n1 4  2     1\n2 4 10     2\n3 7  4     3\n4 7 22     4\n5 8 16     5\n6 9 10     6",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-2-define-ggproto-1",
    "href": "easy_geom_recipes_compute_group.html#step-2-define-ggproto-1",
    "title": "easy geom recipes: compute_group",
    "section": "Step 2: define ggproto",
    "text": "Step 2: define ggproto\n\nStatRownumber &lt;- ggplot2::ggproto(`_class` = \"StatRownumber\",\n                                  `_inherit` = ggplot2::Stat,\n                                  required_aes = c(\"x\", \"y\"),\n                                  compute_group = compute_group_row_number)",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-3-define-geom_-function-1",
    "href": "easy_geom_recipes_compute_group.html#step-3-define-geom_-function-1",
    "title": "easy geom recipes: compute_group",
    "section": "Step 3: define geom_* function",
    "text": "Step 3: define geom_* function\n\ndefine the stat and geom for your layer\n\n\ngeom_label_row_number &lt;- function(mapping = NULL, data = NULL,\n                           position = \"identity\", na.rm = FALSE,\n                           show.legend = NA,\n                           inherit.aes = TRUE, ...) {\n  ggplot2::layer(\n    stat = StatRownumber, # proto object from Step 2\n    geom = ggplot2::GeomLabel, # inherit other behavior, this time Label\n    data = data, \n    mapping = mapping,\n    position = position, \n    show.legend = show.legend, \n    inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-4-enjoy-use-your-function-1",
    "href": "easy_geom_recipes_compute_group.html#step-4-enjoy-use-your-function-1",
    "title": "easy geom recipes: compute_group",
    "section": "Step 4: Enjoy! Use your function",
    "text": "Step 4: Enjoy! Use your function\n\ncars %&gt;% \n  ggplot() + \n  aes(x = speed, y = dist) + \n  geom_point() + \n  geom_label_row_number(hjust = 1.2) # function in action\n\n\n\n\n\n\n\n\n\nAnd check out conditionality!\n\nlast_plot() + \n  aes(color = dist &gt; 60) # Computation is within group",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-0-use-base-ggplot2-to-get-the-job-done-2",
    "href": "easy_geom_recipes_compute_group.html#step-0-use-base-ggplot2-to-get-the-job-done-2",
    "title": "easy geom recipes: compute_group",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\nmodel &lt;- lm(formula = bill_length_mm ~ bill_depth_mm, \n            data = penguins) \n\npenguins_w_fitted &lt;- penguins %&gt;% \n  mutate(fitted = model$fitted.values)\n\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method = \"lm\", se = F) + \n  geom_point(data = penguins_w_fitted,\n             aes(y = fitted),\n             color = \"blue\")",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-1-computation-2",
    "href": "easy_geom_recipes_compute_group.html#step-1-computation-2",
    "title": "easy geom recipes: compute_group",
    "section": "Step 1: computation",
    "text": "Step 1: computation\n\ncompute_group_lm_fitted&lt;- function(data, scales){\n  model&lt;-lm(formula= y ~ x, data = data)\n  data %&gt;% \n    mutate(y=model$fitted.values)\n}\n\n# test out the function\npenguins %&gt;%\n  # rename to explicitly state the x and y inputs\n  rename(x = bill_depth_mm, y = bill_length_mm)%&gt;%\n  compute_group_lm_fitted()\n\n# A tibble: 333 × 8\n   species island        y     x flipper_length_mm body_mass_g sex     year\n   &lt;fct&gt;   &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt; &lt;fct&gt;  &lt;int&gt;\n 1 Adelie  Torgersen  43.0  18.7               181        3750 male    2007\n 2 Adelie  Torgersen  43.8  17.4               186        3800 female  2007\n 3 Adelie  Torgersen  43.5  18                 195        3250 female  2007\n 4 Adelie  Torgersen  42.6  19.3               193        3450 female  2007\n 5 Adelie  Torgersen  41.8  20.6               190        3650 male    2007\n 6 Adelie  Torgersen  43.6  17.8               181        3625 female  2007\n 7 Adelie  Torgersen  42.4  19.6               195        4675 male    2007\n 8 Adelie  Torgersen  43.7  17.6               182        3200 female  2007\n 9 Adelie  Torgersen  41.4  21.2               191        3800 male    2007\n10 Adelie  Torgersen  41.5  21.1               198        4400 male    2007\n# ℹ 323 more rows",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-2-define-ggproto-2",
    "href": "easy_geom_recipes_compute_group.html#step-2-define-ggproto-2",
    "title": "easy geom recipes: compute_group",
    "section": "Step 2: define ggproto",
    "text": "Step 2: define ggproto\n\nStatLmFitted&lt;-ggplot2::ggproto(`_class` = \"StatLmFitted\",\n                                  `_inherit` = ggplot2::Stat,\n                                  required_aes = c(\"x\", \"y\"),\n                                  compute_group = compute_group_lm_fitted)",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-3-define-geom_-function-2",
    "href": "easy_geom_recipes_compute_group.html#step-3-define-geom_-function-2",
    "title": "easy geom recipes: compute_group",
    "section": "Step 3: define geom_* function",
    "text": "Step 3: define geom_* function\n\ngeom_point_lm_fitted &lt;- function(mapping = NULL, data = NULL,\n                           position = \"identity\", na.rm = FALSE,\n                           show.legend = NA,\n                           inherit.aes = TRUE, ...) {\n  ggplot2::layer(\n    stat = StatLmFitted, # proto object from step 2\n    geom = ggplot2::GeomPoint, # inherit other behavior\n    data = data, \n    mapping = mapping,\n    position = position, \n    show.legend = show.legend, \n    inherit.aes = inherit.aes,\n    params = list(na.rm = na.rm, ...)\n  )\n}",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-4-enjoy-use-your-function-2",
    "href": "easy_geom_recipes_compute_group.html#step-4-enjoy-use-your-function-2",
    "title": "easy geom recipes: compute_group",
    "section": "Step 4: Enjoy! Use your function",
    "text": "Step 4: Enjoy! Use your function\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method=\"lm\", se= F)+\n  geom_point_lm_fitted(color=\"blue\")\n\n\n\n\n\n\n\n\n\nAnd check out conditionality\n\npenguins %&gt;% \n  ggplot() + \n  aes(x = bill_depth_mm, y = bill_length_mm) +\n  geom_point() + \n  geom_smooth(method=\"lm\", se= F) +\n  geom_point_lm_fitted() + \n  facet_wrap(facets = vars(species))",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "easy_geom_recipes_compute_group.html#step-0-use-base-ggplot2-to-get-the-job-done-3",
    "href": "easy_geom_recipes_compute_group.html#step-0-use-base-ggplot2-to-get-the-job-done-3",
    "title": "easy geom recipes: compute_group",
    "section": "Step 0: use base ggplot2 to get the job done",
    "text": "Step 0: use base ggplot2 to get the job done\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNot interested in writing your own geoms?\nCheck out some ready-to-go geoms that might be of interest in the ggxmean package… or other extension packages.\nInterested in working a bit more with geoms and making them available to more folks, but not interested in writing your own package?\nJoin in on the development and validation of the ggxmean package for statistical educators and everyday analysis!",
    "crumbs": [
      "Tutorial",
      "easy geom recipes: compute_group"
    ]
  },
  {
    "objectID": "survey_results_summary.html",
    "href": "survey_results_summary.html",
    "title": "Survey response summary",
    "section": "",
    "text": "Survey response summary!\n\n\nstr_wrap_w_levels &lt;- function(x, width, levels){\n  \n  wrapped &lt;- str_wrap(x, width)\n  levels_wrapped &lt;- str_wrap(levels, width)\n  \n  factor(wrapped, levels_wrapped)\n  \n}\n\n\ntheme_minimal_bar &lt;- function(...){\n  \n  \n  list(ggplot2::theme_minimal(...), # %+replace%   ##&lt;&lt; we'll piggy back on an existing theme\n    ggplot2::theme(\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        plot.title.position = \"plot\",\n  \n        #complete = TRUE   ##&lt;&lt; important, see 20.1.2 Complete themes in ggplot2 book\n      \n        )\n  )\n  \n}\n\n\n\n# dist_plot &lt;- function(var = q05, levels = q05_levels, title = q_long[5], var_wrap = 10, base_size = 23, title_wrap = 40){\nggplot(survey) + \n  theme_minimal_bar(base_size = 23) + \n  aes(x = str_wrap_w_levels(q05, 10, q05_levels)) + \n  scale_x_discrete(drop = F) +\n  labs(title = q_long[5] %&gt;% str_wrap(40)) + \n  labs(x = NULL) + \n  labs(y = NULL) + \n  stat_count(geom = \"label\", \n             size = 6, \n             aes(label = after_stat(count)),\n             vjust = 0, label.size = NA, \n             label.padding = unit(0.05, \"lines\"),\n             alpha = .9) + \n  geom_bar(fill = \"midnightblue\",\n           alpha = .9) + \n  scale_y_continuous(limits = c(0,10), breaks = c(0,3,6,9)) -&gt;\ndist_plot_q5; dist_plot_q5\n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q06, 10, q06_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[6] %&gt;% str_wrap(40))\n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q07, 10, q07_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[7] %&gt;% str_wrap(40))\n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q08, 10, q08_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[8] %&gt;% str_wrap(40))\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncompute_panel_multi_response &lt;- function(data, \n                                         scales, \n                                         cat_levels, \n                                         sep = \";\"){\n  \n  # data = data.frame(responses = survey$q09)\n  nrespondents &lt;- nrow(data)\n\n  data %&gt;%\n    summarise(responses = paste0(responses, collapse = sep)) %&gt;% \n    mutate(response = str_split(responses, sep)) %&gt;% \n    select(-responses) %&gt;% \n    unnest(response) %&gt;% \n    filter(response != \"NA\") %&gt;% \n    count(response) %&gt;%\n    mutate(x = factor(response, cat_levels) %&gt;% \n             as.numeric %&gt;% as.double()) %&gt;%\n    mutate(y = as.double(n)) %&gt;% \n    mutate(num_respondents = nrespondents)\n  \n}\n\n\nfruit_cats &lt;- c(\"apple\", \"banana\", \"pear\", \"orange\" )\n\n\ndata.frame(selected_fruit = \n             c(\"banana;apple;pear\", \n               \"apple;pear\", \n               \"banana;pear\")) %&gt;%\n  select(responses = selected_fruit) %&gt;% \n  compute_panel_multi_response(cat_levels = fruit_cats)\n\n# A tibble: 3 × 5\n  response     n     x     y num_respondents\n  &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;           &lt;int&gt;\n1 apple        2     1     2               3\n2 banana       2     2     2               3\n3 pear         3     3     3               3\n\nStatMulticat &lt;- ggplot2::ggproto(`_class` = \"StatMulticat\",\n                        `_inherit` = ggplot2::Stat,  \n                        compute_panel = compute_panel_multi_response,\n                        default_aes = aes(label = ggplot2::after_stat(paste0(n, \"/\", num_respondents))))\n\n\n\ndata.frame(fruit_selections = c(\"banana;apple;pear\", \"apple;pear\", \"pear\")) %&gt;% \n  ggplot() +  \n  aes(responses = fruit_selections) + \n  layer(geom = \"col\", stat = StatMulticat, position = \"identity\",\n         params = list(cat_levels = fruit_cats)) + \n  layer(geom = \"label\", stat = StatMulticat, position = \"identity\",\n        params = list(cat_levels = fruit_cats, \n                      hjust = 0,\n                      alpha = 0,\n                      label.size = 0)) +\n  aes(fill = after_scale(x)) +\n  coord_flip() + \n  labs(title = \"Number of respondents selecting each fruit when asked\\n'Which of the following fruits do you like to eat?'\",\n       subtitle = \"Three people were surveyed\")\n\n\n\n\n\n\n\nlast_plot() +\n  scale_x_continuous(breaks = 1:length(fruit_cats), \n                     labels = fruit_cats, \n                     limits = c(1-.5, length(fruit_cats)+.5)\n                    ) \n\n\n\n\n\n\n\nlayer_data(i = 1)\n\n  fill label PANEL response n x y num_respondents flipped_aes ymin ymax xmin\n1    1   2/3     1    apple 2 1 2               3       FALSE    0    2 0.55\n2    2   1/3     1   banana 1 2 1               3       FALSE    0    1 1.55\n3    3   3/3     1     pear 3 3 3               3       FALSE    0    3 2.55\n  xmax colour linewidth linetype alpha\n1 1.45     NA       0.5        1    NA\n2 2.45     NA       0.5        1    NA\n3 3.45     NA       0.5        1    NA\n\n\n\nsurvey %&gt;%\n  select(responses = q09) %&gt;% \n  compute_panel_multi_response(scales, cat_levels = q09_levels)\n\n\nggplot(data = survey) +\n  aes(responses = q09) +\n  layer(geom = \"bar\", \n        stat = StatMulticat, position = \"identity\",\n        params = list(cat_levels = q09_levels)) +\n  scale_x_continuous(breaks = 1:length(q09_levels), \n                     labels = q09_levels) +\n  coord_flip()\n\nlayer_data()\n\n\nplot_multi_responses &lt;- function(data = survey, var = q11, levels = q11_levels, var_title = q_long[11], var_wrap = 15, base_size = 18, title_wrap = 40){\ndata %&gt;%\n  pull({{var}}) %&gt;%\n  paste(collapse = \";\") %&gt;%\n  str_split_1(\";\") %&gt;%\n  data.frame(x = .) %&gt;%\n  filter(x != \"\") %&gt;% \n  filter(x != \"NA\") %&gt;% \n  filter(!is.na(x)) %&gt;% \n  count(x) %&gt;%\n  mutate(x = x %&gt;% str_wrap(var_wrap)  %&gt;% \n           factor(levels = levels %&gt;% str_wrap(var_wrap) )) %&gt;% \n  mutate(y = n) %&gt;%\n  ggplot() +\n    theme_minimal(base_size = base_size) + \n  aes(x = x , y = y) + \n  labs(x = NULL, y = NULL) +\n  geom_col() +\n  geom_text(aes(label = paste0(y, \"/\", 9)), hjust = -0.2) + \n  aes(fill = x) +\n      scale_x_discrete(drop = F) +\n  theme(plot.title.position = \"plot\") + \n  # theme(axis.text.x = element_blank()) + \n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.x = element_blank())+  \n  scale_y_continuous(limits = c(0,10), breaks = c(0,3,6,9)) + \n  scale_fill_viridis_d(guide = \"none\") + \n  labs(fill = NULL) + \n  coord_flip() + \n  labs(title = var_title %&gt;% str_wrap(title_wrap)) + \n  labs(caption = \"Number of respondents indicating each option\")\n\n}\n# plot_multi_responses()\n\n\nplot_multi_responses(survey, q09, q09_levels, q_long[9])\n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q10, 15, q10_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[10] %&gt;% str_wrap(65)) + \n  theme_minimal_bar(base_size = 15) \n\n\n\nplot_multi_responses(survey, q11, q11_levels, q_long[11], base_size = 12, var_wrap = 40, title_wrap = 70)\n\n\n\n\n\n\n\nplot_multi_responses(survey, q13, q13_levels, var_title = q_long[13], base_size = 18, title_wrap = 50, var_wrap = 35)\n\n\n\nplot_multi_responses(survey, q14, q14_levels, var_title = q_long[14])\n\n\n\n# checkbox\nplot_multi_responses(survey, q15, q15_levels, q_long[15])\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q16, 12, q16_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[16] %&gt;% str_wrap(50)) + \n  theme_minimal(base_size = 17) + \n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q17, 12, q17_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[17] %&gt;% str_wrap(40)) \n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q18, 25, q18_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[18] %&gt;% str_wrap(60)) + \n  theme_minimal_bar(base_size = 15)\n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q19, 25, q19_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[19] %&gt;% str_wrap(45))\n\n\n\nr q_long[20]`\nr paste(survey$q20, collapse = “——————”)`\n\n\nplot_multi_responses(survey, q21, levels = q21_levels, \n                     var_title = q_long[21])\n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q22, 17, q22_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[22] %&gt;% str_wrap(60)) + \n  theme_minimal_bar(base_size = 15)\n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q23, 17, q23_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[23] %&gt;% str_wrap(60)) + \n  theme_minimal_bar(base_size = 15)\n\n\n\n\nr q_long[25]`\nr paste(survey$q25, collapse = “——————”)`\n\n\n\nr q_long[25]`\nr paste(survey$q25, collapse = “——————”)`\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q26, 17, q26_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[26] %&gt;% str_wrap(60)) + \n  theme_minimal_bar(base_size = 15)\n\n\n\ndist_plot_q5 + \n  aes(x = str_wrap_w_levels(q27, 17, q27_levels)) + \n  labs(x = NULL) +\n  labs(title = q_long[27] %&gt;% str_wrap(60)) + \n  theme_minimal_bar(base_size = 15)\n\n\n\n\nr q_long[28]`\nr paste(survey$q28, collapse = “——————”)`",
    "crumbs": [
      "Research",
      "Survey response summary"
    ]
  }
]