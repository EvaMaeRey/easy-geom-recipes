---
title: "Recipe 3: geom_residuals()"
author: "Gina Reynolds, Morgan Brown"
date: "1/3/2022"
webr: 
  packages:
    - tidyverse
    - palmerpenguins
---






# The Goal

Welcome to 'Easy `geom` recipes' Recipe #3: creating geom_fitted and geom_residuals.

Creating a new geom_\*() or stat_\*() function is often motivated when plotting would require pre-computation otherwise. By using Stat extension, you can define computation to be performed *within* the plotting pipeline, as in the code that follows: 


---

# Example recipe #3:  `geom_fitted()`

---

## Step 0: use base ggplot2 to get the job done


It's a good idea to look at how you'd get things done without Stat extension first, just using 'base' ggplot2. The computational moves you make here can serve a reference for building our extension function.

```{r}
#| label: fitted_1

library(tidyverse)
penguins <- remove_missing(palmerpenguins::penguins)

model <- lm(formula = bill_length_mm ~ bill_depth_mm, 
            data = penguins) 

penguins_w_fitted <- penguins |> 
  mutate(fitted = model$fitted.values)

penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) +
  geom_point() + 
  geom_smooth(method = "lm", se = F) + 
  geom_point(data = penguins_w_fitted,
             aes(y = fitted),
             color = "blue")
```

::: {.callout-tip collapse="true"}
### Pro tip.  Use `layer_data()` to inspect ggplot\'s internal data ...

Use ggplot2::layer_data() to inspect the render-ready data internal in the plot.  Your Stat will help prep data to look something like this.

```{r}
layer_data(plot = last_plot(), 
           i = 2) # the fitted y (not the raw data y) is of interest
```

:::

## Step 1: Define compute. Test.

Now you are ready to begin building your extension function. The first step is to define the compute that should be done under-the-hood when your function is used.  We'll define this in a function called `compute_group_lm_fitted()`.  The `data` input will look similar to the plot data.  You will also need to include a `scales` argument, which ggplot2 uses internally. 

```{r}
#| label: fitted_2

compute_group_lm_fitted <- function(data, scales){
  model<-lm(formula = y ~ x, data = data)
  data |> 
    mutate(y = model$fitted.values)
}
```


::: {.callout-note collapse="true"}
# You may have noticed ...

1. **... that our function uses the `scales` argument.** 
<!-- Other things get passed alongside the data, like `scales`, `params`, through `...`.  You don't need to worry about these unless writing more complicated Stats. --> 
The `scales` argument is used internally in ggplot2.  So while it won't be used in your test, you do need it for defining and using the ggproto Stat object in the next step.

2. **... that the compute function assumes that variables x and y are present in the data.**  These aesthetic variables names, relevant for building the plot, are generally not found in the raw data inputs for ggplots.
:::

### Test compute.


```{r}
## Test compute. 
penguins |>
  rename(x = bill_depth_mm, y = bill_length_mm) |>
  compute_group_lm_fitted()
```

::: {.callout-note collapse="true"}
# You may have noticed ...

**... that we prepare the data to have columns with names x and y before testing `compute_group_medians`.** Computation will fail if the names x and y are not present given our function definition.  Internally in a plot, columns are renamed when mapping aesthetics, e.g. `aes(x = bill_depth, y = bill_length)`.
:::



## Step 2: Define new Stat. Test.


Next, we use the ggplot2::ggproto function which allows you to define a new Stat object - which will let us do computation under the hood while building our plot. 

### Define Stat.


```{r}
#| label: fitted_3
StatLmFitted <- ggplot2::ggproto(`_class` = "StatLmFitted",
                                  `_inherit` = ggplot2::Stat,
                                  required_aes = c("x", "y"),
                                  compute_group = compute_group_lm_fitted)
```


::: {.callout-note collapse="true"}
# You may have noticed ...

1. **... that the naming convention for the ggproto object is CamelCase.** The new class should also be named the same, i.e. `"StatLmFitted"`.
2. **... that we inherit from the 'Stat' class.**  In fact, your ggproto object is a *subclass* and you aren't fully defining it.  You simplify the definition by inheriting class properties from ggplot2::Stat. We have a quick look at defaults of generic `Stat` below.  The required_aes and compute_group elements are generic and in StatLmFitted, we update the definition.

```{r}
names(ggplot2::Stat) # which elements exist in Stat
ggplot2::Stat$required_aes # generic some kind of NULL behaivor
```

3. **that the compute_group_lm_fitted function is used to define our Stat's compute_group element.** This means that data will be transformed by our compute definition -- group-wise if groups are specified.
4. **that setting `required_aes` to 'x' and 'y' makes sense given compute assumptions.** The compute assumes data to be a dataframe with columns x and y. If you data doesn't have x and y, your compute will fail.  Specifying `required_aes` in your Stat can improve your user interface because standard ggplot2 error messages will issue if required aes are not specified when plotting, e.g. '`stat_medians()` requires the following missing aesthetics: x.'
  
:::


### Test Stat.

You can test out your Stat using them in ggplot2 geom_*() functions.  

```{r}
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm,
      y = bill_length_mm) + 
  geom_point() + 
  geom_point(stat = StatLmFitted) + 
  labs(title = "Testing StatLmFitted")
```

::: {.callout-note collapse="true"}
# You may have noticed ...

**that we don't use "fitted" as the stat argument, which would be more consistent with base ggplot2 documentation.**  However, if you prefer, you can refer to your newly created Stat this way when testing, i.e. `geom_point(stat = "fitted", size = 7)`.

:::


### Test group-wise behavior

```{r}
last_plot() + 
  aes(color = species)

```

:::  {.callout-tip collapse="true"}
# Pro tip: Think about an early exit ...

You might be thinking, what we've done would already be pretty useful to me.  Can I just use my Stat as-is within geom_*() functions?  

The short answer is 'yes'!  If you just want to use the Stat yourself locally in a script, there might not be much reason to go on to Step 3, user-facing functions.  But if you have a wider audience in mind, i.e. internal to organization or open sourcing in a package, probably a more succinct expression of what functionality you deliver will be useful - i.e. write the user-facing functions.

:::


:::   {.callout-tip collapse="true"}
# Pro tip: consider using `layer()` function to test instead of `geom_*(stat = StatNew)`

Instead of using a `geom_*()` function, you might prefer to use the `layer()` function in your testing step.  Occasionally, it's necessary to go this route; for example, `geom_vline()` contain no `stat` argument, but you can use the GeomVline in `layer()`.  If you are teaching this content, using `layer()` may help you better connect this step with the next, defining the user-facing functions.  

A test of StatFitted using this method follows.  You can see it is a little more verbose, as there is no default for the position argument, and setting the size must be handled with a little more care.

```{r}
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm,
      y = bill_length_mm) + 
  geom_point() + 
  layer(geom = GeomPoint, 
        stat = StatLmFitted, 
        position = "identity", 
        params = list(size = 2)) + 
  labs(title = "Testing StatLmFitted with layer() function")
```

:::


## Step 3: Define user-facing functions. Test.


In this next section, we define user-facing functions.  Doing so is a bit of a mouthful, but *see the 'Pro tip:  Use `stat_identity` definition as a template in this step ...' that follows*.


```{r}
#| label: fitted_4

stat_lm_fitted <- function(mapping = NULL, data = NULL, geom = "point", position = "identity", 
    ..., show.legend = NA, inherit.aes = TRUE) {
    layer(data = data, mapping = mapping, stat = StatLmFitted, 
        geom = geom, position = position, show.legend = show.legend, 
        inherit.aes = inherit.aes, params = list(na.rm = FALSE, 
            ...))
}
```


::: {.callout-note collapse="true"}
# You may have noticed...

1. **... that the `stat_*()` function name derives from the Stat objects's name, but is snake case.** So if I wanted a StatBigCircle based stat_\*() function, I'd create stat_big_circle().

2. **... that `StatIndex` is used to define the new layer function**, so the computation that defines it, which is to summarize to medians, will be in play before the layer is rendered.

3. **... that `"label"` is specified as the default for the geom argument in the function.**  This means that the `ggplot2::GeomLabel` will be used in the layer unless otherwise specified by the user. 
:::


::: {.callout-tip collapse="true"}
## Pro tip.  Use `stat_identity` definition as a template in this step ...
...

You may be thinking, defining a new stat_\*() function is a mouthful that's probably hard to reproduce from memory.  So you might use `stat_identity()`'s definition as scaffolding to write your own layer. i.e:

- Type `stat_identity` in your console to print function contents; copy-paste the function definition. 
- Switch out `StatIdentity` with your Stat, e.g. `StatLmFitted`. 
- Switch out `"point"` other geom ('rect', 'text', 'line' etc) if needed
- Final touch, `list2` will error without export from rlang, so update to `rlang::list2`.

```{r}
stat_identity
```

:::


### Define geom_*() function

Because users are more accustom to using layers that have the 'geom' prefix, you might also define geom with identical properties via aliasing. 

```{r}
geom_lm_fitted <- stat_lm_fitted
```


::: {.callout-warning collapse="true"}
# Be aware ...

... verbatim aliasing as shown above is a bit of a shortcut and assumes that users will use the 'geom_\*()' function with the stat-geom combination as-is. (For a discussion, see [**Constructors**](https://ggplot2-book.org/ext-springs.html#constructors) in 'Extending ggplot2: A case Study' in *ggplot2: Elegant Graphics for Data Analysis*.  This section notes, 'Most ggplot2 users are accustomed to adding geoms, not stats, when building up a plot.') 

An approach that is more consistent with existing guidance would be to hardcode the Geom and allow the user to change the Stat as follows. 


```{r}
# user-facing function
geom_lm_fitted <- function(mapping = NULL, data = NULL, 
                         stat = "lm_fitted", position = "identity", 
                         ..., show.legend = NA, inherit.aes = TRUE) 
{
    layer(data = data, mapping = mapping, stat = stat, 
        geom = GeomPoint, position = position, show.legend = show.legend, 
        inherit.aes = inherit.aes, params = rlang::list2(na.rm = FALSE, 
            ...))
}
```

However, because it is unexpected to use `geom_lm_fitted()` with a Stat other than StatLmFitted (doing so would remove the fitted-ness) we think that the verbatim aliasing is a reasonable, time and code saving getting-started approach.  
:::


## Test/Enjoy functions

```{r}
#| label: fitted_5
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) +
  geom_point() + 
  geom_smooth(method = "lm") +
  geom_lm_fitted()
```

### And check out conditionality

```{r}
#| label: fitted_6
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) +
  geom_point() + 
  geom_smooth(method= "lm", se= F) +
  geom_lm_fitted() + 
  facet_wrap(facets = vars(species))
```

# Done! Time for a review.

Here is a quick review of the functions and ggproto objects we've covered, dropping tests and discussion.

::: {.callout-note collapse="false"}
# Review

```{r}
library(tidyverse)

# Step 1. Define compute
compute_group_lm_fitted <- function(data, scales){
  model <- lm(formula = y ~ x, data = data)
  data |> 
    mutate(y = model$fitted.values)
}


# Step 2. Define Stat
StatLmFitted = ggproto(`_class` = "StatLmFitted",
                      `_inherit` = Stat,
                      required_aes = c("x", "y"),
                      compute_group = compute_group_lm_fitted)

# Step 3. Define user-facing functions

## define stat_*()
stat_lm_fitted <- function(mapping = NULL, data = NULL, 
                         geom = "point", position = "identity", 
                         ..., show.legend = NA, inherit.aes = TRUE) 
{
    layer(data = data, mapping = mapping, stat = StatLmFitted, 
        geom = geom, position = position, show.legend = show.legend, 
        inherit.aes = inherit.aes, params = rlang::list2(na.rm = FALSE, 
            ...))
}

## define geom_*()
geom_lm_fitted <- stat_lm_fitted
```

::: 

# Your Turn: Write `geom_residuals()`

Using the `geom_lm_fitted` Recipe #3 as a reference, try to create a `stat_lm_residuals()` and convenience `geom_fitted()` that draws a segment between observed and fitted values for a linear model. 

### Hint: consider what aesthetics are required for segments.  We'll give you Step 0 this time...

## Step 0: use base ggplot2 to get the job done

```{webr-r}
#| label: exercise-setup
#| autorun: true
#| read-only: true
library(tidyverse)
library(palmerpenguins)
# handling missingness is not a discussion of this tutorial, so we'll only use complete cases
penguins_clean <- ggplot2::remove_missing(penguins) 

# step 0: use base ggplot2
model <- lm(formula = bill_length_mm ~ bill_depth_mm, 
            data = penguins_clean) 

penguins_w_fitted <- penguins_clean |> 
  mutate(fitted = model$fitted.values)

penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) +
  geom_point() + 
  geom_smooth(method = "lm", se = F) + 
  geom_segment(data = penguins_w_fitted,
             aes(yend = fitted, xend = bill_depth_mm),
             color = "blue")
```

### Step 1: Write compute function. Test.

```{webr}
#| exercise: geom_means
# Define. 
compute_group_lm_residuals <- function(data, scales){
  
  model <- lm(formula = y ~ x, data = data)
  
  ___ |> 
    mutate(xend = x,
           yend = model$fitted.values)
  
}

# Test.
penguins_clean |> 
  select(x = bill_depth_mm, 
         ____ = bill_length_mm) |>
  compute_group_lm_residuals()
```

### Step 2: Write Stat.


```{webr}
#| exercise: geom_means
# Define.
StatLmResiduals <- ggproto(`_class` = "____",
                     `_inherit` = Stat,
                     compute_group = ____,
                     required_aes = c("x", "____"))

# Test.
penguins_clean |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) + 
  geom_point() +
  geom_smooth(method = lm) +
  geom_segment(stat = ____, color = "blue")

```

### Step 3: Write user-facing functions. 


```{webr}
#| exercise: geom_means
# Define.
stat_lm_residuals <- function (mapping = NULL, data = NULL, geom = "segment", position = "identity", 
    ..., show.legend = NA, inherit.aes = TRUE){
    layer(data = data, mapping = mapping, stat = ____, 
        geom = geom, position = position, show.legend = show.legend, 
        inherit.aes = inherit.aes, params = rlang::list2(na.rm = FALSE, 
            ...))
}


# Alias.
geom_lm_residuals <- ____


# Test.
penguins_clean |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) + 
  geom_point() +
  geom_smooth(method = lm) +
  ____(color = "blue")
```


# Congratulations!

If you've finished all three recipes, you feel for how Stats can help you build layer functions like stat_residuals and geom_residuals.  


