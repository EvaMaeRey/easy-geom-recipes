---
title: "ggplot2 sublayer modularity"
subtitle: "a brief and whimsical first-look behind the curtains of ggplot2's layers"
---

# format: closeread-html


```{r,include=F}
library(tidyverse)
cars <- tibble(cars)
knitr::opts_chunk$set(echo = T, message = F, warning = F)
```

::: cr-section
::: {focus-on="cr-PLOT000"}
If you are a fan of ggplot2, you are probably also a fan of 'layer' functions `geom_*()` and `stat_*()`.
:::

::: {focus-on="cr-PLOT000"}
Important clarification before we begin: Sometimes *all* the ggplot2 functions are referred to as ggplot2 'layers', i.e. scales\_\*(), coord\_\*(), etc as in 'build up your plot layer-by-layer'. \*
:::

::: {focus-on="cr-PLOT000"}
But we are using the word in the narrower sense used in the ggplot2 documentation, which typically have the geom and stat prefix.
:::

::: {#cr-PLOT000}
![](images/clipboard-1589230205.png)
:::

::: {focus-on="cr-PLOT00"}
Maybe you get giddy thinking about `geom_bump()`, `geom_ridgeline()`, or classic `geom_histogram()`?
:::

::: {#cr-PLOT00}
![](images/clipboard-1637685515.png)
:::

::: {focus-on="cr-PLOT0"}
Well-composed `geom_*()`s and `stat_*()`s (i.e. layer) make for more fluid analytic discovery.
:::

::: {focus-on="cr-PLOT0"}
But what elements constitute a layer function?
:::

::: {#cr-PLOT0}
![](images/clipboard-506665849.png)
:::

::: {focus-on="cr-PLOT1"}
Let's look at `geom_bar()` to get a feel for what layer composition means.

In this plot specification, geom_bar() counts the number of observations that are of each value of x (cut).
:::

::: {#cr-PLOT1}
```{r PLOT1}
library(ggplot2) 
ggplot(diamonds) + 
  aes(x = cut) + 
  geom_bar()
```
:::

::: {focus-on="cr-PLOT2b"}
There are actually *three* main characters in every `geom_()` or `stat_()`.
:::

They are `geom`, `stat`, and `position`.

In `geom_bar()` the `geom` is fixed, but `stat` and `position` are adjustable. You can see that their defaults are `"count"` and `"stack"` in the function's definition.

::: {#cr-PLOT2b}
![](images/clipboard-309178775.png)

```{r}
geom_bar
```
:::

::: {focus-on="cr-PLOT2a"}
And instead of using convenient `geom_bar()`, we can use the more generic `layer()` function - which is actually used under the hood to define all `geom_*()` and `stat_*()` functions.
:::

We can reproduce \`geom_bar()\`'s behavior with `layer()`, but we must provide all three 'control operators':`layer(geom = "bar", stat = "count", position = "stack")`.

::: {#cr-PLOT2a}
```{r PLOT2a}
library(ggplot2) 
ggplot(diamonds) + 
  aes(x = cut) + 
  layer(geom = "bar", stat = "count", position = "stack")
```
:::

::: {focus-on="cr-PLOT2c"}
Or, equivalently, we can simply name the underlying `ggproto` *objects*, `GeomBar` and `StatCount` in our case, and the position function, `position_stack()` .
:::

::: {#cr-PLOT2c}
```{r PLOT2b}
library(ggplot2) 
ggplot(diamonds) + 
  aes(x = cut) + 
  layer(geom = GeomBar, stat = StatCount, position = position_stack())
```
:::

::: {focus-on="cr-PLOT2f"}
Reiteration: There are actually 'control operators' that define the `geom_*()` and `stat_*()` user-facing function. Geoms, Stats, and `position_*()`.
:::

::: {focus-on="cr-PLOT2f"}
You can refer to them *indirectly* by quoting their stem, `layer(geom = "bar", stat = "count", position = "stack")`.
:::

::: {focus-on="cr-PLOT2f"}
Or use the ggproto objects and position function *directly*, `layer(geom = GeomBar, stat = StatCount, position = position_stack())`
:::

::: {#cr-PLOT2f}
![](images/clipboard-309178775.png)
:::

::: {focus-on="cr-PLOT2d"}
Focus: *Lets look at one 'control operator', the Stat, more closely.*
:::

::: {#cr-PLOT2d}
![](images/clipboard-1390047241.png)
:::

::: {focus-on="cr-PLOT2e"}
Stats themselves have a number of control elements.
:::

::: {#cr-PLOT2e}
![](images/clipboard-2172743515.png)

```{r PLOT2e}
StatCount |> names()
```
:::

::: {focus-on="cr-PLOT2f"}
It transforms plot input data before it is passed off to be rendered.

Stat's computation is defined in the compute slots.

And in `StatCount`, compute is done group-wise, so `compute_group()` defines StatCount's data transformation.
:::

<div>

```{r PLOT2f}
StatCount$compute_group
```

</div>

::: {focus-on="cr-PLOT3"}
We can get a sense of `StatCount$compute_group`'s behavior by using on our data.

First, we use `select()` to make the data look as it would inside of the ggplot2 plotting environment â€” this mirrors the `aes(x = cut)` mapping declaration.

Then we see that the data is collapsed by `x`, and `count` and `prop` variables are produced.
:::

::: {#cr-PLOT3}
```{r PLOT3}

library(dplyr)

diamonds |> 
  select(x = cut) |>
  StatCount$compute_group() 
```
:::

::: {focus-on="cr-PLOT4"}
We can think about StatCount's job as doing some computation that the user might otherwise be responsible for.
:::

We use StatCount\$compute_group() to manually do this computation for us, in conjunction with StatIdentity (leaves data alone) in `layer` to show this work explicitly.

::: {#cr-PLOT4}
```{r PLOT4}
precomputation <- diamonds |> 
  select(x = cut) |>
  StatCount$compute_group()

precomputation |>
  ggplot() + 
  aes(x = x, y = count) + 
  layer(geom = GeomBar, 
        stat = StatIdentity, 
        position = position_stack())
```
:::

::: {focus-on="cr-PLOT4a"}
Key point: *We might think Stat's job as lightening the analyst's load - doing computation that the user would otherwise need to do for before plotting.*
:::

::: {#cr-PLOT4a}
![](images/clipboard-3717409450.png)
:::

::: {focus-on="cr-PLOT4b"}
One final question you might have is 'how exactly is the height of the bar, `y`, communicated to the ggplot2 system? Why does that *just work*?
:::

::: {#cr-PLOT4b}
![](images/clipboard-482897444.png)
:::

::: {focus-on="cr-PLOT5"}
This is managed by the `default_aes` specification for StatCount.

Because there is no variable mapped to y in our plot specification, y position defaults to `after_stat(count)`, in other words the *computed variable* `count` that is available *after* the StatCount computation is done!
:::

::: {#cr-PLOT5}
```{r PLOT5}
StatCount$default_aes

ggplot(data = diamonds) + 
  aes(x = cut) + 
  layer(geom = GeomBar, 
        stat = StatCount, 
        position = position_stack())
```
:::

::: {focus-on="cr-PLOT5bb"}
And it is good to do a little mix-and-match thinking to get a further feel for StatCount. Which of the following plots will have identical outputs?
:::

::: {#cr-PLOT5bb}
```{r PLOT5bb}
p1 <- ggplot(data = diamonds) + 
  aes(x = cut) + 
  layer(geom = GeomBar, 
        stat = StatCount, 
        position = position_stack())

p2 <- p1 + geom_point(stat = StatCount)

p3 <- p1 + stat_count(geom = GeomPoint)

p4 <- p1 + geom_label(stat = StatCount, 
                      aes(label = after_stat(count)))

p5 <- p1 + stat_count(geom = GeomText, 
                      aes(label = after_stat(count)), 
                      vjust = 1)
```
:::

::: {focus-on="cr-PLOT5c"}
Is this what you anticipated?
:::

::: {#cr-PLOT5c}
```{r PLOT5c}
library(patchwork)
p2+ p3 + p4 + p5
```
:::

::: {focus-on="cr-PLOT6"}
Above, we've had an *outside*-in look at some aspects of 'sublayer modularity'.

To get an *inside*-out look --- building up your *own* Stat from scratch --- you might have a look at ['easy geom recipes'](https://evamaerey.github.io/easy-geom-recipes/) or by joining [ggplot2 extenders club](https://teunbrand.github.io/ggplot-extension-club/)
:::

::: {#cr-PLOT6}
![](images/clipboard-2051185906.png)
:::
:::
