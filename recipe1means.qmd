---
title: "Recipe #1, `geom_medians() and geom_means()`"
webr: 
  packages:
    - tidyverse
    - palmerpenguins
---

# The Goal

In this first recipe, we'll look at simple examples of defining a new `geom_*()` function, `geom_medians()` and `geom_means()`.  

Each `geom_*()` function (layer) is defined by three major elements: a `Geom`, a `Stat`, and a `position`.  The simplest among these to create is a new `Stat`, so the 'Easy recipes' start with these. And while simple, `Stats` are also powerful because they allow you compute to be integrated into your plotting pipeline --- that you would otherwise might need to do 'manually' before plotting.  

Along with writing the `geom_\*()` function, we'll write a `stat_*()` function, which is pretty typical for seasoned ggplot2 developers. It's okay if *you* don't typically write your plots with `stat_*()` functions -- you can ignore these `stat_*()` functions if you like. 

::: {.callout-tip}

# Note that in the ggplot2 extension context, the word 'layer' *only* refers to `geom_*()`, `stat_*()`, and `annotate()` functions.  These all use the `layer()` function internally -- a function that requires --- you guessed it --- a `Geom`, a `Stat`, and a `position`!

:::

```{r, echo = F, eval = F, code = readLines("make_constructor.R")}

```


```{r, eval = F}
ggplot(data = penguins) + 
  aes(x = bill_depth_mm,
      y = bill_length_mm) + 
  geom_point() + 
  geom_means(size = 8, color = "red") # new function!
```

```{r, echo = F, message=F, warning=F}
library(tidyverse)
library(palmerpenguins)

penguins_medians <- penguins |> 
  summarize(bill_length_mm_median = median(bill_length_mm, na.rm = T),
            bill_depth_mm_median = median(bill_depth_mm, na.rm = T))

# Plot.
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) + 
  geom_point() + 
  geom_point(data = penguins_medians,
             aes(x = bill_depth_mm_median,
                 y = bill_length_mm_median),
             size = 8, color = "red")
```

In this exercise, we'll demonstrate how to define the new extension function `geom_medians()` to add a point at the medians `x` and `y`. Then you'll be prompted to define `geom_means()` based on what you've learned.

---

```{r}
#| label: setup
#| include: false 
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
```

## Step 00: Loading packages and prepping data

<!-- Handling missingness is not a discussion of this tutorial, so we'll only use complete cases. -->

```{r, message = F, warning=F}
library(tidyverse)
library(palmerpenguins)
glimpse(penguins)
```



## Step 0: use base ggplot2 to get the job done


It's a good idea to get things done without Stat extension first, just using 'base' ggplot2. The computational moves you make here can serve a reference for building our extension function.


```{r status-quo}
#| label: penguins
# Compute.
penguins_medians <- penguins |> 
  summarize(bill_length_mm_median = median(bill_length_mm, na.rm = T),
            bill_depth_mm_median = median(bill_depth_mm, na.rm = T))

# Plot.
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) + 
  geom_point() + 
  geom_point(data = penguins_medians,
             aes(x = bill_depth_mm_median,
                 y = bill_length_mm_median),
             size = 8, color = "red") + 
  labs(title = "Created with base ggplot2")
```


::: {.callout-tip collapse="true"}
### Pro tip.  Use `layer_data()` to inspect ggplot\'s internal data ...

Use ggplot2::layer_data() to inspect the render-ready data internal in the plot.  Your Stat will help prep data to look something like this.

```{r}
layer_data(plot = last_plot(), 
           i = 2) # layer 2, the computed means, is of interest
```
:::




## Step 1: Define compute. Test.

Now you are ready to begin building your extension function. The first step is to define the compute that should be done under-the-hood when your function is used.  We'll define this in a function called `compute_group_medians()`.  The `data` input will look similar to the plot data.  You will also need to include a `scales` argument, which ggplot2 uses internally. 

### Define compute.

```{r}
#| label: compute_group_medians

# Define compute.
compute_group_medians <- function(data, scales){ 
  data |> 
    summarize(x = median(x, na.rm = T),
              y = median(y, na.rm = T))
}
```

::: {.callout-note collapse="false"}
# You may have noticed ... 

1. **... the `scales` argument in the compute definition, which is used internally in ggplot2.**  While it won't be used in your test (up next), you do need so that the computation will work in the ggplot2 setting.

2. **... that the compute function can only be used with data with variables `x` and `y`.**  These aesthetic variables names, relevant for building the plot, are generally not found in the raw data inputs for plot.
:::


### Test compute.

```{r}
# Test compute. 
penguins |>
  select(x = bill_depth_mm,  
         y = bill_length_mm) |>  
  compute_group_medians()
```

::: {.callout-note collapse="false"}
# You may have noticed ... 

**... that we prepare the data to have columns with names `x` and `y` before testing.**  Computation will fail if variables `x` and `y` are not present given the function's definition.  In a plotting setting, columns are renamed by mapping aesthetics, e.g. `aes(x = bill_depth, y = bill_length)`.
:::


## Step 2: Define new Stat. Test.

Next, we use the ggplot2::ggproto function which allows you to define a new Stat object - which will let us do computation under the hood while building our plot. 

<!-- https://ggplot2.tidyverse.org/reference/ggproto.html -->

### Define Stat.

```{r}
#| label: StatMedians
StatMedians <- 
  ggplot2::ggproto(`_class` = "StatMedians",              # <1>
                   `_inherit` = ggplot2::Stat,            # <2>
                   compute_group = compute_group_medians, # <3>
                   required_aes = c("x", "y"))            # <4>
```

::: {.callout-note collapse="false"}
# You may have noticed... 

1. **... that the naming convention for the `ggproto` object is written in  CamelCase. **The new class should also be named the same, i.e. `"StatMedians"`.
2. **... that we inherit from the 'Stat' class.**  In fact, your ggproto object is a *subclass* -- you are inheriting class properties from ggplot2::Stat. 

3. **... that the `compute_group_medians` function is used to define our Stat's `compute_group` element.** This means that data will be transformed group-wise by our compute definition -- i.e. by categories if a categorical variable is mapped.

4. **... that setting `required_aes` to `x` and `y` reflects the compute functions requirements** Specifying `required_aes` in your Stat can improve your user interface. Standard ggplot2 error messages will issue if required aes are not specified, e.g. "`stat_medians()` requires the following missing aesthetics: `x`."
  


<!-- https://yjunechoe.github.io/posts/2022-07-06-ggplot2-delayed-aes-2/#ggproto-minus-the-gg-and-the-proto  -->

:::


### Test Stat.

You can test out your Stat using them in ggplot2 `geom_*()` functions.  

```{r}
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm,
      y = bill_length_mm) + 
  geom_point() + 
  geom_point(stat = StatMedians, size = 7) + 
  labs(title = "Testing StatMedians")
```

::: {.callout-note collapse="false"}
# You may have noticed ...

**... that we don't use `"medians"` as the `stat` argument. But you could!**  If you prefer, you could write `geom_point(stat = "medians", size = 7)` which will direct to your new `StatMedians` under the hood. 
:::

### Test Stat group-wise behavior

Test group-wise behavior by using a discrete variable with an group-triggering aesthetic like color, fill, or group, or by faceting.



```{r}
last_plot() + 
  aes(color = species)
```

:::  {.callout-tip collapse="true"}
# Pro tip: Think about an early exit (don't define a user-facing function) ...

You might be thinking, what we've done would already be pretty useful to me.  Can I just use my Stat as-is within `geom_*()` functions?  

The short answer is 'yes'!  If you just want to use the Stat yourself locally in a script, there might not be much reason to go on to Step 3, user-facing functions.  But if you have a wider audience in mind, i.e. internal to organization or open sourcing in a package, probably a more succinct expression of what functionality you deliver will be useful - i.e. write the user-facing functions.
:::


:::   {.callout-tip collapse="true"}
# Pro tip: consider using `layer()` function to test instead of `geom_*(stat = StatNew)`

Instead of using a `geom_*()` function, you might prefer to use the `layer()` function in your testing step.  Occasionally, you *must* to go this route; for example, `geom_vline()` contain no `stat` argument, but you can use the GeomVline in `layer()`.  If you are teaching this content, using `layer()` may help you better connect this step with the next, defining the user-facing functions.  

A test of StatMedians using this method follows.  You can see it is a little more verbose, as there is no default for the position argument, and setting the size must be handled with a little more care.

```{r}
penguins |> 
  ggplot() + 
  aes(x = bill_depth_mm,
      y = bill_length_mm) + 
  geom_point() + 
  layer(geom = GeomPoint, 
        stat = StatMedians, 
        position = "identity", 
        params = list(size = 7)) + 
  labs(title = "Testing StatMedians with layer() function")
```

:::





## Step 3: Define user-facing functions. Test.

In this next section, we define user-facing functions.  Doing so is a bit of a mouthful, but see the 'Pro tip:  *Use `geom_point` definition as a template in this step ...*' that follows.

### Define stat_\*() and geom_\*() functions. 

```{r}
stat_medians <- function (mapping = NULL, data = NULL,
                          geom = "point", position = "identity",
                          ..., na.rm = FALSE, 
                          show.legend = NA, inherit.aes = TRUE) 
{
    layer(mapping = mapping, data = data, 
          geom = geom, stat = StatMedians, 
          position = position, show.legend = show.legend, 
          inherit.aes = inherit.aes, 
        params = rlang::list2(na.rm = na.rm, ...))
}
```




::: {.callout-note collapse="false"}
# You may have noticed that ...

1. **... the `stat_*()` function name derives from the Stat object's name, but is snake case.** Given naming conventions, a StatBigCircle-based stat_\*() function, should be named stat_big_circle().

2. **... `StatMedians` defines the new layer function and cannot be replaced by the user** `StatMedians` and the computation that defines it will be in effect before the layer is rendered.

3. **... `"point"` refers to the object GeomPoint and defines the layer's `geom` unless otherwise specified.**

:::


::: {.callout-tip collapse="true"}
## Pro tip. 🎉 Use `make_constructor()` to write the scaffolding code for you upon the next ggplot2 release.

```{r, eval = F}
stat_medians <- make_constructor(StatMedians, geom = "point")
```

:::


### Define geom_*() function

Because users are more accustom to using layers that have the `geom` prefix, you might also define geom with identical properties via aliasing. 

> 'Most ggplot2 users are accustomed to adding geoms, not stats, when building up a plot.' *ggplot2: Elegant Graphics for Data Analysis*. 

```{r}
geom_medians <- stat_medians
```


::: {.callout-warning collapse="true"}
# Be aware that verbatim aliasing as shown above is a bit of a shortcut, and a tad unconventional. 

It is more conventional write out scaffolding code, nearly identical to the stat_*() definition, but has the geom fixed and the stat flexible.

But soon we can use `make_constructor()` in the next ggplot2 release, just about as easy as aliasing and which will deliver the fixed geom and flexible stat convention in what follows:


```{r, eval = F}
geom_medians <- make_constructor(GeomPoint, stat = "medians")
```

:::




### Test/Enjoy your user-facing functions

### Test geom_medians()

```{r}
## Test user-facing.
penguins |>
  ggplot() +
  aes(x = bill_depth_mm, y = bill_length_mm) +
  geom_point() +
  geom_medians(size = 8)  + 
  labs(title = "Testing geom_medians()")
```

### Test group-wise behavior

```{r}
last_plot() + 
  aes(color = species) 
```

### Test stat_*() function with another Geom.

```{r}
last_plot() + 
  stat_medians(geom = "label", aes(label = species))  + 
  labs(subtitle = "and stat_medians()")
```




# Done! Time for a review.

Here is a quick review of the functions and ggproto objects we've covered, dropping tests and discussion.

::: {.callout-note collapse="false"}
# Review

```{r}
library(tidyverse)

# Step 1. Define compute
compute_group_medians <- function(data, scales){
  
  data |>
    summarise(x = median(x), y = median(y))
  
}

# Step 2. Define Stat
StatMedians = ggproto(`_class` = "StatMedians",
                      `_inherit` = Stat,
                      required_aes = c("x", "y"),
                      compute_group = compute_group_medians)

# Step 3. Define user-facing functions (user friendly, geom_*() function only shown here)

## use geom_point's definition as a model to follow geom_* conventions: geom is fixed, stat is flexible
stat_medians <- function(mapping = NULL, data = NULL, 
                         geom = "point", position = "identity", 
                         ..., show.legend = NA, inherit.aes = TRUE) 
{
    layer(data = data, mapping = mapping, stat = StatMedians, 
        geom = geom, position = position, show.legend = show.legend, 
        inherit.aes = inherit.aes, params = rlang::list2(na.rm = FALSE, 
            ...))
}
```

::: 


# Your Turn: write `geom_means()`

Using the `geom_medians` Recipe #1 as a reference, try to create a `stat_means()` function that draws a point at the means of x and y. You may also write convenience geom_*() functions. 

### Step 00: load libraries, data

```{webr}
#| setup: true
#| exercise: geom_means
#| warning: false

library(tidyverse)
library(palmerpenguins)
glimpse(penguins)
```

### Step 0: Use base ggplot2 to get the job done

```{webr}
#| exercise: geom_means
# Step 0: Use base ggplot2 to get the job done.
penguins_means <- penguins_clean |> 
  summarise(mean_bill_depth_mm = ____(bill_depth_mm),
            ____ = mean(bill_length_mm))

penguins_clean |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) + 
  geom_point() + 
  geom_point(data = penguins_means,
             aes(x = mean_bill_depth_mm,
                 y = ____),
                 size = 8, color = "red")
```

### Step 1: Write compute function. Test.

```{webr}
#| exercise: geom_means
# Define. 
compute_group_means <- function(data, scales){
  
  data |> 
    summarise(x = mean(x, na.rm = T),
              y = ____(____, na.rm = T))
  
}

# Test.
penguins_clean |> 
  select(x = bill_depth_mm, 
         ____ = bill_length_mm) |>
  compute_group_means()
```

### Step 2: Write Stat.


```{webr}
#| exercise: geom_means
# Define.
StatMeans <- ggproto(`_class` = "____",
                     `_inherit` = Stat,
                     compute_group = ____,
                     required_aes = c("x", "____"))

# Test.
penguins_clean |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) + 
  geom_point() +
  geom_point(stat = ____,
             size = 8, color = "red")

```

### Step 3: Write user-facing functions


```{webr}
#| exercise: stat_means
# Define geom_means.
stat_means <- function (mapping = NULL, data = NULL, geom = "point", position = "identity", 
    ..., na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) 
{
    layer(mapping = mapping, data = data, geom = geom, stat = ___, 
        position = position, show.legend = show.legend, inherit.aes = inherit.aes, 
        params = list2(na.rm = na.rm, ...))
}
}

# Alias
geom_means <- ____

# Test.
penguins_clean |> 
  ggplot() + 
  aes(x = bill_depth_mm, y = bill_length_mm) + 
  geom_point() +
  ____(size = 8, color = "red")
```






# Next up: Recipe 2 `geom_id()`

How would you write the function which annotates coordinates (x,y) for data points on a scatterplot? Go to [Recipe 2](./recipe2coordinates.qmd).





::: {.callout-note collapse="true"}
### Pro tip: check out `ggplot2::stat_manual()` for group-wise compute in the next ggplot2 release one-offs or [`statexpress::qstat()`](https://github.com/EvaMaeRey/statexpress) for a quick stat short-cut in extension explorations.  




```{r, eval = F}
## Consider statexpress::qstat_*() functions for more 
## flexibility and exploratory extension work 
mean_fun <- function(data, scales){
  
  data |>
    summarize(x = mean(x, na.rm = T),
              y = mean(y, na.rm = T))
}

library(statexpress)
ggplot(penguins) + 
  aes(x = bill_depth_mm,
      y = bill_length_mm) + 
  geom_point() + 
  geom_point(stat = qstat(mean_fun),
             size = 8)

## option 2, use geom_point(stat = "manual")
means_fun2 <- function(data){
  
  data |>
    summarize(x = mean(x, na.rm = T),
              y = mean(y, na.rm = T))
  
}

ggplot(penguins) + 
  aes(x = bill_depth_mm,
      y = bill_length_mm) + 
  geom_point() + 
  geom_point(stat = "manual",
             fun = means_fun2, 
             size = 8)

# or use the stat_manual function; GeomPoint is the default... 
ggplot(penguins) + 
  aes(x = bill_depth_mm,
      y = bill_length_mm) + 
  stat_manual(size = 8, # geom default is "point"
              fun = means_fun2)
```




:::




